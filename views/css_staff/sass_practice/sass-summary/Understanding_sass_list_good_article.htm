<!DOCTYPE html>
<!-- saved from url=(0061)https://hugogiraudel.com/2013/07/15/understanding-sass-lists/ -->
<html lang="en"><head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article:
http://ogp.me/ns/article#"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <!-- Global stuff -->
  
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="dns-prefetch" href="https://www.google-analytics.com/">
  <link rel="manifest" href="https://hugogiraudel.com/manifest.json">
  <meta name="theme-color" content="#2c3e50">

  <!-- Robots & indexing -->
  
  <meta name="robots" content="index,follow">
  <meta name="revisit-after" content="1 days">
  

  <!-- Page specific content -->
  <title>Understanding Sass lists</title>
  <meta name="description" content="  Edit (2015/05/28): After realising this article ranks up incredibly high on Sass Google searches, I come back to it to clear a few things up. Deletions are...">
  
  <meta name="keywords" content="sass,lists">
  
  <meta name="author" content="Hugo Giraudel">
  <link rel="canonical" href="https://hugogiraudel.com/2013/07/15/understanding-sass-lists/">

  <!-- Stylesheets -->
  <link rel="stylesheet" href="./Understanding_sass_list_good_article_files/main.css">
  <!--[if lt IE 9]><script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]-->

  <!-- JS utilities -->
  <script src="./Understanding_sass_list_good_article_files/embed.js" async=""></script><script src="./Understanding_sass_list_good_article_files/azcarbon_2_1_0_HORIZ" async=""></script><script src="./Understanding_sass_list_good_article_files/ga.js" async=""></script><script>
  function loadJS(e,t){"use strict";var n=document.getElementsByTagName("script")[0],r=document.createElement("script");return r.src=e,r.async=!0,n.parentNode.insertBefore(r,n),t&&"function"==typeof t&&(r.onload=t),r}

  </script>

  <!-- RSS -->
  <link rel="alternate" type="application/rss+xml" title="Hugo Giraudel, front-end developer in Berlin" href="https://hugogiraudel.com/rss">

  <!-- Favicon -->
  <link rel="shortcut icon" href="https://hugogiraudel.com/assets/images/favicon.png">

  <!-- Open Graph data -->
  <meta property="og:title" content="Understanding Sass lists">
  <meta property="og:type" content="article">
  <meta property="og:url" content="https://hugogiraudel.com/2013/07/15/understanding-sass-lists/">
  <meta property="og:description" content="  Edit (2015/05/28): After realising this article ranks up incredibly high on Sass Google searches, I come back to it to clear a few things up. Deletions are...">
  <meta property="og:site_name" content="HugoGiraudel.com">

  <!-- Twitter Card data -->
  <meta name="twitter:card" content="summary">
  <meta name="twitter:site" content="@HugoGiraudel">
  <meta name="twitter:title" content="Understanding Sass lists">
  <meta name="twitter:description" content="  Edit (2015/05/28): After realising this article ranks up incredibly high on Sass Google searches, I come back to it to clear a few things up. Deletions are...">
  <meta name="twitter:creator" content="@HugoGiraudel">
<script id="_carbonads_projs" type="text/javascript" src="./Understanding_sass_list_good_article_files/C6AILKT.json"></script><link rel="preload" as="style" href="https://c.disquscdn.com/next/embed/styles/lounge.fd8dd5b4caa272d5555d54950ee98166.css"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/common.bundle.8edffe1405dcc2d5eb5ee9d96a2866d1.js"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/lounge.bundle.8d07a4869c3ec17ee1881ae6bd353027.js"><link rel="preload" as="script" href="https://disqus.com/next/config.js"><style>.carbonad{display:block;background:#fdfdfd;background-image:-moz-linear-gradient(top,#f8f8f8,#fdfdfd);background-image:-webkit-gradient(linear,left top,left bottom,color-stop(0,#f8f8f8),color-stop(1,#fdfdfd));border:1px solid #d5d5d5;font-family:Lucida Grande,Arial,Helvetica,sans-serif;font-size:11px;height:118px;line-height:15px;overflow:hidden;width:300px}.carbonad-img{border:none;display:inline;float:left;height:100px;margin:9px;width:130px}.carbonad-text{display:inline;float:left;width:142px;padding-top:13px}.carbonad-text a{color:#000;text-decoration:none;text-transform:none;}.carbonad-tag{float:left;margin-top:9px;text-align:center;width:142px;color:#999}.carbonad-tag a{color:#999;text-decoration:none}</style></head>


  <body class="t-blue">
    <header class="header" role="banner">
  <span class="header__title t-dark-grey nav__item nav__item--logo">
    <a class="nav__link nav__link--logo" href="https://hugogiraudel.com/">hugogiraudel.com</a>
  </span>
  <nav role="navigation" class="nav">
    <ul class="nav__list">
      
      <li class="nav__item t-teal">
        <a class="nav__link" href="https://hugogiraudel.com/blog/">Writing</a>
      </li>
      
      <li class="nav__item t-green">
        <a class="nav__link" href="https://hugogiraudel.com/projects/">Coding</a>
      </li>
      
      <li class="nav__item t-yellow">
        <a class="nav__link" href="https://hugogiraudel.com/speaking/">Speaking</a>
      </li>
      
      <li class="nav__item t-orange">
        <a class="nav__link" href="https://hugogiraudel.com/about/">About me</a>
      </li>
      
      <li class="nav__item t-red">
        <a class="nav__link" href="https://hugogiraudel.com/guest/">Guests posts</a>
      </li>
      
      <li class="nav__item t-pink">
        <a class="nav__link" href="https://hugogiraudel.com/search/">Search</a>
      </li>
      
    </ul>
  </nav>

  <div class="nav">
    <ul class="nav__list">
      <li class="nav__item">
        <a class="nav__link" href="https://hugogiraudel.com/rss/">RSS</a>
      </li>
      <li class="nav__item">
        <a class="nav__link" href="https://github.com/HugoGiraudel" target="blank">GitHub</a>
      </li><li class="nav__item">
        <a class="nav__link" href="http://twitter.com/HugoGiraudel" target="blank">Twitter</a>
      </li>
    </ul>
  </div>

  <div class="site-ad" id="carbonads-container">
  <div class="carbonad">
    <div id="azcarbon"><span><span class="carbonad-image"><a href="https://srv.buysellads.com/ads/click/x/GTND42QJCVAI627UC6A4YKQMC67DE2QUCVSD4Z3JCWYICK3ICTSIC23KC6BI4KJ7CVADEK3EHJNCLSIZZRLCP7I35MNFV?segment=placement:hugogiraudelcom;&amp;encredirect=https%3A%2F%2Fslack.com%2Flp%3Fcvosrc%3Ddisplay.carbon.green%20dev%26utm_source%3Dcarbon%26utm_medium%3Ddisplay%26utm_campaign%3Dgreen%20dev%26c3ch%3DCarbon%20Networks%26c3nid%3DGreen%20dev" target="_blank" rel="noopener"><img width="130" height="100" border="0" src="./Understanding_sass_list_good_article_files/32054" class="carbonad-image carbonad-img" style="max-width:130px;"></a></span><span class="carbonad-text"><a href="https://srv.buysellads.com/ads/click/x/GTND42QJCVAI627UC6A4YKQMC67DE2QUCVSD4Z3JCWYICK3ICTSIC23KC6BI4KJ7CVADEK3EHJNCLSIZZRLCP7I35MNFV?segment=placement:hugogiraudelcom;&amp;encredirect=https%3A%2F%2Fslack.com%2Flp%3Fcvosrc%3Ddisplay.carbon.green%20dev%26utm_source%3Dcarbon%26utm_medium%3Ddisplay%26utm_campaign%3Dgreen%20dev%26c3ch%3DCarbon%20Networks%26c3nid%3DGreen%20dev" rel="noopener">All the tools your team needs in one place. Slack: Where work happens.</a></span><span class="carbonad-tag">ads via <a href="http://carbonads.net/?utm_source=hugogiraudelcom&amp;utm_medium=ad_via_link&amp;utm_campaign=in_unit&amp;utm_term=carbon">Carbon</a></span><img src="./Understanding_sass_list_good_article_files/cvo.gif" border="0" height="1" width="1" style="display: none;"><img src="./Understanding_sass_list_good_article_files/v.gif" border="0" height="1" width="1" style="display: none;"></span></div>
  </div>
</div>

</header>


    <main class="main" role="main">
      <div class="container">
      <article itemscope="" itemtype="http://schema.org/Article" class="article">
  

  <div class="title-wrapper">
    <div>
     
      <h1 class="title" itemprop="title">Understanding Sass lists</h1> 
    
    </div>
  </div>

  
    <p itemprop="datePublished" class="post-date">July 15, 2013
    
    <span itemtype="timeRequired">(<span class="reading-time" title="Estimated read time">~10 mins</span>)</span></p>
  

  

  <div itemtype="articleBody">
  <blockquote>
  <p><strong>Edit (2015/05/28):</strong> After realising this article ranks up incredibly high on <em>Sass</em> Google searches, I come back to it to clear a few things up. Deletions are lined-through, additions are in italic.</p>
</blockquote>

<p>Lists have to be the most complicated and vicious thing in the whole Sass language. The main problem with lists -if a problem it is- is that the syntax is way too permissive. You can do pretty much whatever you want.</p>

<p>Anyway, I recently had the opportunity to write <a href="http://css-tricks.com/striped-background-gradients/">an article for CSS-Tricks</a> about a Sass function involving quite a lot of list manipulation. I introduced the topic by clearing a couple of things regarding Sass lists but I wanted to write a more in-depth article.</p>

<h2 id="creating-a-sass-list">Creating a Sass list</h2>

<p>First things first. <span style="text-decoration: line-through">Even creating a Sass list can be tricky. Indeed,</span> Sass isn’t very strict with variable types. Basically it means you can process a list quite like a string, or use list functions on a <span style="text-decoration: line-through">string</span> <em>single value</em>. It is <span style="text-decoration: line-through">basically</span> <em>kind of</em> a mess.</p>

<p><span style="text-decoration: line-through">Anyway, we have a couple of ways to initialize an empty variable (that could be treated as a list):</span> <em>There is a single way to initialize an empty variable (whatever that means), and it’s with <code class="highlighter-rouge">null</code>.</em></p>

<blockquote>
  <p>Sass isn’t very strict with variable type.</p>
</blockquote>

<div class="language-scss highlighter-rouge"><pre class="highlight"><code><span class="nv">$a</span><span class="p">:</span> <span class="p">();</span>
<span class="nv">$b</span><span class="p">:</span> <span class="nf">unquote</span><span class="p">(</span><span class="s1">''</span><span class="p">);</span>
<span class="nv">$c</span><span class="p">:</span> <span class="n">null</span><span class="p">;</span>
<span class="nv">$d</span><span class="p">:</span> <span class="p">(</span><span class="n">null</span><span class="p">);</span>
</code></pre>
</div>

<p>Now we have defined our variables, we will check their type. Just for fun.</p>

<div class="language-scss highlighter-rouge"><pre class="highlight"><code><span class="nt">type-of</span><span class="o">(</span><span class="err">$</span><span class="nt">a</span><span class="o">)</span> <span class="nt">-</span><span class="o">&gt;</span> <span class="nt">list</span>
<span class="nt">type-of</span><span class="o">(</span><span class="err">$</span><span class="nt">b</span><span class="o">)</span> <span class="nt">-</span><span class="o">&gt;</span> <span class="nt">string</span>
<span class="nt">type-of</span><span class="o">(</span><span class="err">$</span><span class="nt">c</span><span class="o">)</span> <span class="nt">-</span><span class="o">&gt;</span> <span class="nt">null</span>
<span class="nt">type-of</span><span class="o">(</span><span class="err">$</span><span class="nt">d</span><span class="o">)</span> <span class="nt">-</span><span class="o">&gt;</span> <span class="nt">null</span>
</code></pre>
</div>

<p>Since <code class="highlighter-rouge">$c</code> and <code class="highlighter-rouge">$d</code> are stricly equivalent, we will remove the later from the next tests. Let’s check the length of each variable.</p>

<div class="language-scss highlighter-rouge"><pre class="highlight"><code><span class="nt">length</span><span class="o">(</span><span class="err">$</span><span class="nt">a</span><span class="o">)</span> <span class="nt">-</span><span class="o">&gt;</span> <span class="nt">0</span>
<span class="nt">length</span><span class="o">(</span><span class="err">$</span><span class="nt">b</span><span class="o">)</span> <span class="nt">-</span><span class="o">&gt;</span> <span class="nt">1</span>
<span class="nt">length</span><span class="o">(</span><span class="err">$</span><span class="nt">c</span><span class="o">)</span> <span class="nt">-</span><span class="o">&gt;</span> <span class="nt">1</span>
</code></pre>
</div>

<p><code class="highlighter-rouge">$a</code> being 0 item long is what we would have expected since it is an empty list. String being 1 item long isn’t that odd either since it is a string. <span style="text-decoration: line-through">However the <code>null</code> variable being 1 item long is kind of weird; more on this later.</span> <em>It’s not weird either; <code class="highlighter-rouge">null</code> is pretty much a value like another, so it has a length of 1.</em></p>

<h2 id="sass-list-fun-facts">Sass list “fun” facts</h2>

<p>This section has been quickly covered in the article at CSS-Tricks but since it is the very basics I have to put this here as well.</p>

<p><strong>You can use spaces or commas as separator.</strong> Even if I feel more comfortable with commas since it is the classic separator for arrays (JavaScript, PHP…). <em>You can check the separator of a list with the <code class="highlighter-rouge">list-separator($list)</code> function.</em></p>

<div class="language-scss highlighter-rouge"><pre class="highlight"><code><span class="nv">$list-space</span><span class="p">:</span> <span class="s2">"item-1"</span> <span class="s2">"item-2"</span> <span class="s2">"item-3"</span><span class="p">;</span>
<span class="nv">$list-comma</span><span class="p">:</span> <span class="s2">"item-1"</span><span class="o">,</span> <span class="s2">"item-2"</span><span class="o">,</span> <span class="s2">"item-3"</span><span class="p">;</span>
</code></pre>
</div>

<p><em>Note: As in CSS, you can ommit quotes for your strings as long as they don’t contain any special characters. So <code class="highlighter-rouge">$list: item-1, item-2, item-3</code> is perfectly valid.</em></p>

<p><strong>You can nest lists.</strong> As for JavaScript or any other language, there is no limit regarding the level of depth you can have with nested lists. Just go as deep as you need to, bro.</p>

<div class="language-scss highlighter-rouge"><pre class="highlight"><code><span class="cm">/* Nested lists with braces and same separator */</span>
<span class="nv">$list</span><span class="p">:</span> <span class="p">(</span> 
    <span class="p">(</span><span class="s2">"item-1.1"</span><span class="o">,</span> <span class="s2">"item-1.2"</span><span class="o">,</span> <span class="s2">"item-1.3"</span><span class="p">)</span><span class="o">,</span> 
    <span class="p">(</span><span class="s2">"item-2.1"</span><span class="o">,</span> <span class="s2">"item-2.2"</span><span class="o">,</span> <span class="s2">"item-2.3"</span><span class="p">)</span><span class="o">,</span>
    <span class="p">(</span><span class="s2">"item-3.1"</span><span class="o">,</span> <span class="s2">"item-3.2"</span><span class="o">,</span> <span class="s2">"item-3.3"</span><span class="p">)</span>
<span class="p">);</span>
       
<span class="cm">/* Nested lists without braces using different separators to distinguish levels */</span>
<span class="nv">$list</span><span class="p">:</span> <span class="s2">"item-1.1"</span> <span class="s2">"item-1.2"</span> <span class="s2">"item-1.3"</span><span class="o">,</span> 
       <span class="s2">"item-2.1"</span> <span class="s2">"item-2.2"</span> <span class="s2">"item-2.3"</span><span class="o">,</span>
       <span class="s2">"item-3.1"</span> <span class="s2">"item-3.2"</span> <span class="s2">"item-3.3"</span><span class="p">;</span>
</code></pre>
</div>

<p><strong>You can ommit parentheses</strong> (as you can guess from the previous example). You can define a non-empty list without any parentheses if you feel so. This is because -contrarily to what most people think- <a href="https://github.com/nex3/sass/issues/837#issuecomment-20429965">parentheses are not what create lists</a> in Sass (except when empty); it is the delimiter (see below). Braces are a just a grouping mecanism.</p>

<p><em>Note: This is the theory. I’ve noticed braces are not just a grouping mecanism. When manipulating matrices (4/5+ levels of nesting), braces are definitely not optional. This is too complicated for today though, we’ll dig into this in another blog post.</em></p>

<blockquote>
  <p>Manipulating 5+ nested lists is a pain in the ass.</p>
</blockquote>

<div class="language-scss highlighter-rouge"><pre class="highlight"><code><span class="nv">$list</span><span class="p">:</span> <span class="s2">"item-1"</span><span class="o">,</span> <span class="s2">"item-2"</span><span class="o">,</span> <span class="s2">"item-3"</span><span class="p">;</span>
</code></pre>
</div>

<p><strong>Indexes start at 1, not 0.</strong> This is one of the most disturbing once you start experimenting with Sass lists. <span style="text-decoration: line-through">Plus it makes a lot of things pretty complicated (cf CSS-Tricks article).</span> <em>No, it doesn’t.</em></p>

<div class="language-scss highlighter-rouge"><pre class="highlight"><code><span class="nt">nth</span><span class="o">(</span><span class="err">$</span><span class="nt">list</span><span class="o">,</span> <span class="nt">0</span><span class="o">)</span> <span class="nt">-</span><span class="o">&gt;</span> <span class="nt">throws</span> <span class="nt">error</span>
<span class="nt">nth</span><span class="o">(</span><span class="err">$</span><span class="nt">list</span><span class="o">,</span> <span class="nt">1</span><span class="o">)</span> <span class="nt">-</span><span class="o">&gt;</span> <span class="s2">"item-1"</span>
</code></pre>
</div>

<p><strong>Every value in Sass is treated as a <span style="text-decoration: line-through">list</span> <em>one-element list</em>.</strong> Strings, numbers, boolean, whatever you can put in a variable. This means you’re fine to use some list functions even on things that don’t look like one.</p>

<div class="language-scss highlighter-rouge"><pre class="highlight"><code><span class="nv">$variable</span><span class="p">:</span> <span class="s2">"Sass is awesome"</span><span class="p">;</span>
<span class="nt">length</span><span class="o">(</span><span class="err">$</span><span class="nt">variable</span><span class="o">)</span> <span class="nt">-</span><span class="o">&gt;</span> <span class="nt">1</span>
</code></pre>
</div>

<p><em>Beware! If you remove the quotes around this string, it will be parsed as a 3-items long list (1: Sass; 2: is; 3: awesome). I recommand you quotes your strings to avoid some unpleasant surprises.</em></p>

<h2 id="sass-list-functions">Sass list functions</h2>

<p>Before getting into the real topic, let’s make a round-up on Sass list functions.</p>

<p><strong><code class="highlighter-rouge">length($list)</code></strong>: returns the length of <code class="highlighter-rouge">$list</code>.</p>

<p><strong><code class="highlighter-rouge">nth($list, $index)</code></strong>: returns the value at <code class="highlighter-rouge">$index</code> position in <code class="highlighter-rouge">$list</code> (throw an error if index is greater than the list length).</p>

<p><strong><code class="highlighter-rouge">index($list, $value)</code></strong>: returns the first index of <code class="highlighter-rouge">$value</code> in <code class="highlighter-rouge">$list</code> (or <code class="highlighter-rouge">null</code>).</p>

<p><strong><code class="highlighter-rouge">append($list, $value[, $separator])</code></strong>: appends <code class="highlighter-rouge">$value</code> to the end of <code class="highlighter-rouge">$list</code> using <code class="highlighter-rouge">$separator</code> as a separator (using the current one if not specified).</p>

<p><strong><code class="highlighter-rouge">join($list-1, $list-2[, $separator])</code></strong>: appends <code class="highlighter-rouge">$list-2</code> to <code class="highlighter-rouge">$list-1</code> using <code class="highlighter-rouge">$separator</code> as a separator (using the one from the first list if not specified).</p>

<p><strong><code class="highlighter-rouge">zip(*$lists)</code></strong>: combines several list into a comma-separated list where the nth value is a space-separated lists of all source lists nth values. In case source lists are not all the same length, the result list will be the length of the shortest one.</p>

<h2 id="adding-things-to-sass-lists">Adding things to Sass lists</h2>

<p>This is where things get very interesting. And quite complicated as well. I think the best way to explain this kind of stuff is to use an example. I’ll use the same I talked about in <a href="http://hugogiraudel.com/2013/07/01/feedbacks-kiwiparty/">my Sass talk at KiwiParty</a> last month.</p>

<p>Please consider an extended selector like:</p>

<div class="language-css highlighter-rouge"><pre class="highlight"><code>
<span class="nc">.home</span> <span class="nc">.nav-home</span><span class="o">,</span>
<span class="nc">.about</span> <span class="nc">.nav-about</span><span class="o">,</span>
<span class="nc">.products</span> <span class="nc">.nav-products</span><span class="o">,</span>
<span class="nc">.contact</span> <span class="nc">.nav-contact</span> <span class="p">{}</span>

</code></pre>
</div>

<p>…based on a list of keywords <code class="highlighter-rouge">$pages: ('home', 'about', 'products', 'contact')</code>. I found 3 ways to generate this selector based on the list; we’ll see them one by one.</p>

<p>But first, we will write the skeleton of our testcase:</p>

<div class="language-scss highlighter-rouge"><pre class="highlight"><code><span class="nv">$pages</span><span class="p">:</span> <span class="p">(</span><span class="s1">'home'</span><span class="o">,</span> <span class="s1">'about'</span><span class="o">,</span> <span class="s1">'products'</span><span class="o">,</span> <span class="s1">'contact'</span><span class="p">);</span>
<span class="nv">$selector</span><span class="p">:</span> <span class="p">();</span>

<span class="k">@each</span> <span class="nv">$item</span> <span class="n">in</span> <span class="nv">$pages</span> <span class="p">{</span>
  <span class="cm">/* We create `$selector` */</span>
<span class="p">}</span>

<span class="si">#{</span><span class="nv">$selector</span><span class="si">}</span> <span class="p">{</span>
  <span class="na">style</span><span class="p">:</span> <span class="n">awesome</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
</div>

<h3 id="the-long-and-dirty-way">The long and dirty way</h3>

<p>This is the method I was still using a couple of weeks ago. It works but it involves an extra conditional statement to handle commas <em>(also it’s ugly)</em>. Please see below.</p>

<div class="language-scss highlighter-rouge"><pre class="highlight"><code><span class="k">@each</span> <span class="nv">$item</span> <span class="n">in</span> <span class="nv">$pages</span> <span class="p">{</span>
  <span class="nv">$selector</span><span class="p">:</span> <span class="nv">$selector</span> <span class="nf">unquote</span><span class="p">(</span><span class="s1">'.</span><span class="si">#{</span><span class="nv">$item</span><span class="si">}</span><span class="s1"> .nav-</span><span class="si">#{</span><span class="nv">$item</span><span class="si">}</span><span class="s1">'</span><span class="p">);</span>
    
  <span class="c1">// Add comma if not dealing with the last item of list
</span>  <span class="k">@if</span> <span class="nv">$item</span> <span class="o">!=</span> <span class="nf">nth</span><span class="p">(</span><span class="nv">$pages</span><span class="o">,</span> <span class="nf">length</span><span class="p">(</span><span class="nv">$pages</span><span class="p">))</span> <span class="p">{</span>
    <span class="nv">$selector</span><span class="p">:</span> <span class="nv">$selector</span> <span class="nf">unquote</span><span class="p">(</span><span class="s1">','</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
</div>

<p>Basically, we add the new selector to <code class="highlighter-rouge">$selector</code> and if we are not dealing with the last item of the list, we add a comma.</p>

<p><em>Note: we have to use <code class="highlighter-rouge">unquote('')</code> to treat our new selector as an unquoted string.</em></p>

<h3 id="the-clean-way">The clean way</h3>

<p>This one is the cleanest way you can use between the three; not the shortest though. Anyway, it uses <code class="highlighter-rouge">append(..)</code> properly.</p>

<div class="language-scss highlighter-rouge"><pre class="highlight"><code><span class="k">@each</span> <span class="nv">$item</span> <span class="n">in</span> <span class="nv">$pages</span> <span class="p">{</span>
  <span class="nv">$selector</span><span class="p">:</span> <span class="nf">append</span><span class="p">(</span><span class="nv">$selector</span><span class="o">,</span> <span class="nf">unquote</span><span class="p">(</span><span class="s1">'.</span><span class="si">#{</span><span class="nv">$item</span><span class="si">}</span><span class="s1"> .nav-</span><span class="si">#{</span><span class="nv">$item</span><span class="si">}</span><span class="s1">'</span><span class="p">)</span><span class="o">,</span> <span class="s1">'comma'</span><span class="p">);</span>
<span class="p">}</span>
</code></pre>
</div>

<p>I think this is pretty straightforward: we append to <code class="highlighter-rouge">$selector</code> the new selector by explicitly separating it from the previous one with a comma.</p>

<h3 id="the-implicit-way">The implicit way</h3>

<p><span style="text-decoration: line-through">Probably my favorite version above all since it’s the shortest.</span> It relies on implicit appending; <span style="text-decoration: line-through">very neat.</span> <em>so I highly recommend you to use the <code class="highlighter-rouge">append(..)</code> way.</em></p>

<div class="language-scss highlighter-rouge"><pre class="highlight"><code><span class="k">@each</span> <span class="nv">$item</span> <span class="n">in</span> <span class="nv">$pages</span> <span class="p">{</span>
  <span class="nv">$selector</span><span class="p">:</span> <span class="nv">$selector</span><span class="o">,</span> <span class="nf">unquote</span><span class="p">(</span><span class="s1">'.</span><span class="si">#{</span><span class="nv">$item</span><span class="si">}</span><span class="s1"> .nav-</span><span class="si">#{</span><span class="nv">$item</span><span class="si">}</span><span class="s1">'</span><span class="p">);</span>
<span class="p">}</span>
</code></pre>
</div>

<p>Instead of using <code class="highlighter-rouge">append(..)</code> and setting the 3rd parameter to <code class="highlighter-rouge">comma</code> we implicitly do it via removing the function and using a comma right after <code class="highlighter-rouge">$selector</code>.</p>

<h2 id="final-words">Final words</h2>

<blockquote>
  <p>Having a very permissive syntax can be complicated.</p>
</blockquote>

<p>The three versions we saw in the previous section work like a charm, <span style="text-decoration: line-through">the one you should use is really up to you</span> <em>although the one with <code class="highlighter-rouge">append(..)</code> is definitely the cleaner way of handling this. You can also do it in some other more complicated and dirty ways.</em></p>

<p>Anyway, this shows why having a very permissive syntax can be complicated. As I said at the beginning of this post, you can do pretty much whatever you want and if you want my opinion this isn’t for the best.</p>

  </div>

  
    <div id="disqus_thread" itemprop="comment"><iframe id="dsq-app680" name="dsq-app680" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" title="Disqus" width="100%" src="./Understanding_sass_list_good_article_files/saved_resource.html" style="width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 403px !important;" horizontalscrolling="no" verticalscrolling="no"></iframe></div> 
  
</article>

      </div>
    </main>

    <footer class="footer" role="contentinfo">
  <div class="container">
    <p>©&nbsp;2012-2017 Hugo Giraudel — hosted on <a href="https://netlify.com/">Netlify</a></p>
  </div>
</footer>

    <script src="./Understanding_sass_list_good_article_files/main.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function () {
  var app = new App({
    createToC: false,
    loadComments: true,
    disqusOptions: {
      title: "Understanding Sass lists",
      url: window.location.href,
      name: 'hugogiraudel'
    }
  })
})
</script>
<script>
if ('serviceWorker' in navigator) {
  navigator.serviceWorker
    .register('/service-worker.js', { scope: '/' })
    .then(function (registration) {
      console.log(
        '%cserviceworker:registration', 'color:green',
        'successful with scope: ' + registration.scope
      )
    })
    .catch(function (error) {
      console.error(
        '%cserviceworker:registration', 'color:red',
        'failed: ', error
      )
    })
}
</script>

  


<iframe style="display: none;" src="./Understanding_sass_list_good_article_files/saved_resource(2).html"></iframe></body></html>