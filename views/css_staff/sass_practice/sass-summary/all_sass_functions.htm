<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0061)http://sass-lang.com/documentation/Sass/Script/Functions.html -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">  <title> Module: Sass::Script::Functions — Sass Documentation </title> <link rel="stylesheet" href="./all_sass_functions_files/style-03d6d7d0.css" charset="utf-8"> <link rel="stylesheet" href="./all_sass_functions_files/docs-ae450f0e.css" charset="utf-8"> <script charset="utf-8">
  hasFrames = window.top.frames.main ? true : false;
  relpath = '../../';
  framesUrl = "../../frames.html#!Sass/Script/Functions.html";
</script> <script charset="utf-8" src="./all_sass_functions_files/jquery-4b300c63.js"></script> <script charset="utf-8" src="./all_sass_functions_files/app-b67511c2.js"></script> </head> <body> <div id="header"> <div id="menu"> <a href="http://sass-lang.com/documentation/_index.html">Index (F)</a> » <span class="title"><span class="object_link"><a href="http://sass-lang.com/documentation/Sass.html" title="Sass (module)">Sass</a></span></span> » <span class="title"><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script.html" title="Sass::Script (module)">Script</a></span></span> » <span class="title">Functions</span> <div class="noframes"><span class="title">(</span><a href="http://sass-lang.com/documentation/frames.html#!Sass/Script/Functions.html" target="_top">frames</a><span class="title">)</span></div> </div> <div id="search"> <a class="full_list_link" id="class_list_link" href="http://sass-lang.com/documentation/class_list.html"> Class List </a> <a class="full_list_link" id="method_list_link" href="http://sass-lang.com/documentation/method_list.html"> Method List </a> <a class="full_list_link" id="file_list_link" href="http://sass-lang.com/documentation/file_list.html"> File List </a> </div> <div class="clear"></div> </div> <iframe id="search_frame" src="./all_sass_functions_files/saved_resource.html"></iframe> <div id="content"><h1>Module: Sass::Script::Functions </h1> <dl class="box"> <dt class="r1" style="height: 24px;">Included in:</dt> <dd class="r1"><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions/EvaluationContext.html" title="Sass::Script::Functions::EvaluationContext (class)">EvaluationContext</a></span></dd> <dt class="r2 last" style="height: 48px;">Defined in:</dt> <dd class="r2 last">/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb</dd> </dl> <div class="clear"></div> <h2>Overview</h2><div class="docstring"> <div class="discussion"> <p>Methods in this module are accessible from the SassScript context. For example, you can write</p> <pre class="code ruby"><code class="ruby">$color: hsl(120deg, 100%, 50%)
</code></pre> <p>and it will call <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#hsl-instance_method" title="Sass::Script::Functions#hsl (method)">#hsl</a></span>.</p> <p>The following functions are provided:</p> <p><em>Note: These functions are described in more detail below.</em></p> <h2>RGB Functions</h2> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#rgb-instance_method" title="Sass::Script::Functions#rgb (method)">rgb($red, $green, $blue)</a></span> : Creates a <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Color</a></span> from red, green, and blue values.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#rgba-instance_method" title="Sass::Script::Functions#rgba (method)">rgba($red, $green, $blue, $alpha)</a></span> : Creates a <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Color</a></span> from red, green, blue, and alpha values.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#red-instance_method" title="Sass::Script::Functions#red (method)">red($color)</a></span> : Gets the red component of a color.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#green-instance_method" title="Sass::Script::Functions#green (method)">green($color)</a></span> : Gets the green component of a color.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#blue-instance_method" title="Sass::Script::Functions#blue (method)">blue($color)</a></span> : Gets the blue component of a color.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method" title="Sass::Script::Functions#mix (method)">mix($color1, $color2, [$weight])</a></span> : Mixes two colors together.</p> <h2>HSL Functions</h2> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#hsl-instance_method" title="Sass::Script::Functions#hsl (method)">hsl($hue, $saturation, $lightness)</a></span> : Creates a <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Color</a></span> from hue, saturation, and lightness values.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#hsla-instance_method" title="Sass::Script::Functions#hsla (method)">hsla($hue, $saturation, $lightness, $alpha)</a></span> : Creates a <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Color</a></span> from hue, saturation, lightness, and alpha values.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#hue-instance_method" title="Sass::Script::Functions#hue (method)">hue($color)</a></span> : Gets the hue component of a color.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#saturation-instance_method" title="Sass::Script::Functions#saturation (method)">saturation($color)</a></span> : Gets the saturation component of a color.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#lightness-instance_method" title="Sass::Script::Functions#lightness (method)">lightness($color)</a></span> : Gets the lightness component of a color.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#adjust_hue-instance_method" title="Sass::Script::Functions#adjust_hue (method)">adjust-hue($color, $degrees)</a></span> : Changes the hue of a color.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#lighten-instance_method" title="Sass::Script::Functions#lighten (method)">lighten($color, $amount)</a></span> : Makes a color lighter.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#darken-instance_method" title="Sass::Script::Functions#darken (method)">darken($color, $amount)</a></span> : Makes a color darker.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#saturate-instance_method" title="Sass::Script::Functions#saturate (method)">saturate($color, $amount)</a></span> : Makes a color more saturated.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#desaturate-instance_method" title="Sass::Script::Functions#desaturate (method)">desaturate($color, $amount)</a></span> : Makes a color less saturated.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#grayscale-instance_method" title="Sass::Script::Functions#grayscale (method)">grayscale($color)</a></span> : Converts a color to grayscale.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#complement-instance_method" title="Sass::Script::Functions#complement (method)">complement($color)</a></span> : Returns the complement of a color.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#invert-instance_method" title="Sass::Script::Functions#invert (method)">invert($color, [$weight])</a></span> : Returns the inverse of a color.</p> <h2>Opacity Functions</h2> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#alpha-instance_method" title="Sass::Script::Functions#alpha (method)">alpha($color)</a></span> / <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#opacity-instance_method" title="Sass::Script::Functions#opacity (method)">opacity($color)</a></span> : Gets the alpha component (opacity) of a color.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#rgba-instance_method" title="Sass::Script::Functions#rgba (method)">rgba($color, $alpha)</a></span> : Changes the alpha component for a color.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#opacify-instance_method" title="Sass::Script::Functions#opacify (method)">opacify($color, $amount)</a></span> / <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#fade_in-instance_method" title="Sass::Script::Functions#fade_in (method)">fade-in($color, $amount)</a></span> : Makes a color more opaque.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#transparentize-instance_method" title="Sass::Script::Functions#transparentize (method)">transparentize($color, $amount)</a></span> / <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#fade_out-instance_method" title="Sass::Script::Functions#fade_out (method)">fade-out($color, $amount)</a></span> : Makes a color more transparent.</p> <h2>Other Color Functions</h2> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#adjust_color-instance_method" title="Sass::Script::Functions#adjust_color (method)">adjust-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])</a></span> : Increases or decreases one or more components of a color.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#scale_color-instance_method" title="Sass::Script::Functions#scale_color (method)">scale-color($color, [$red], [$green], [$blue], [$saturation], [$lightness], [$alpha])</a></span> : Fluidly scales one or more properties of a color.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#change_color-instance_method" title="Sass::Script::Functions#change_color (method)">change-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])</a></span> : Changes one or more properties of a color.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#ie_hex_str-instance_method" title="Sass::Script::Functions#ie_hex_str (method)">ie-hex-str($color)</a></span> : Converts a color into the format understood by IE filters.</p> <h2>String Functions</h2> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#unquote-instance_method" title="Sass::Script::Functions#unquote (method)">unquote($string)</a></span> : Removes quotes from a string.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#quote-instance_method" title="Sass::Script::Functions#quote (method)">quote($string)</a></span> : Adds quotes to a string.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#str_length-instance_method" title="Sass::Script::Functions#str_length (method)">str-length($string)</a></span> : Returns the number of characters in a string.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#str_insert-instance_method" title="Sass::Script::Functions#str_insert (method)">str-insert($string, $insert, $index)</a></span> : Inserts <code>$insert</code> into <code>$string</code> at <code>$index</code>.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#str_index-instance_method" title="Sass::Script::Functions#str_index (method)">str-index($string, $substring)</a></span> : Returns the index of the first occurrence of <code>$substring</code> in <code>$string</code>.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#str_slice-instance_method" title="Sass::Script::Functions#str_slice (method)">str-slice($string, $start-at, [$end-at])</a></span> : Extracts a substring from <code>$string</code>.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#to_upper_case-instance_method" title="Sass::Script::Functions#to_upper_case (method)">to-upper-case($string)</a></span> : Converts a string to upper case.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#to_lower_case-instance_method" title="Sass::Script::Functions#to_lower_case (method)">to-lower-case($string)</a></span> : Converts a string to lower case.</p> <h2>Number Functions</h2> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#percentage-instance_method" title="Sass::Script::Functions#percentage (method)">percentage($number)</a></span> : Converts a unitless number to a percentage.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#round-instance_method" title="Sass::Script::Functions#round (method)">round($number)</a></span> : Rounds a number to the nearest whole number.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#ceil-instance_method" title="Sass::Script::Functions#ceil (method)">ceil($number)</a></span> : Rounds a number up to the next whole number.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#floor-instance_method" title="Sass::Script::Functions#floor (method)">floor($number)</a></span> : Rounds a number down to the previous whole number.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#abs-instance_method" title="Sass::Script::Functions#abs (method)">abs($number)</a></span> : Returns the absolute value of a number.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#min-instance_method" title="Sass::Script::Functions#min (method)">min($numbers...)</a></span> : Finds the minimum of several numbers.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#max-instance_method" title="Sass::Script::Functions#max (method)">max($numbers...)</a></span> : Finds the maximum of several numbers.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#random-instance_method" title="Sass::Script::Functions#random (method)">random([$limit])</a></span> : Returns a random number.</p> <h2>List Functions #list-functions</h2> <p>Lists in Sass are immutable; all list functions return a new list rather than updating the existing list in-place.</p> <p>All list functions work for maps as well, treating them as lists of pairs.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#length-instance_method" title="Sass::Script::Functions#length (method)">length($list)</a></span> : Returns the length of a list.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#nth-instance_method" title="Sass::Script::Functions#nth (method)">nth($list, $n)</a></span> : Returns a specific item in a list.</p> <p>set-nth($list, $n, $value) : Replaces the nth item in a list.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#join-instance_method" title="Sass::Script::Functions#join (method)">join($list1, $list2, [$separator, $bracketed])</a></span> : Joins together two lists into one.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#append-instance_method" title="Sass::Script::Functions#append (method)">append($list1, $val, [$separator])</a></span> : Appends a single value onto the end of a list.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#zip-instance_method" title="Sass::Script::Functions#zip (method)">zip($lists...)</a></span> : Combines several lists into a single multidimensional list.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#index-instance_method" title="Sass::Script::Functions#index (method)">index($list, $value)</a></span> : Returns the position of a value within a list.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#list_separator-instance_method" title="Sass::Script::Functions#list_separator (method)">list-separator($list)</a></span> : Returns the separator of a list.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#is_bracketed-instance_method" title="Sass::Script::Functions#is_bracketed (method)">is-bracketed($list)</a></span> : Returns whether a list has square brackets.</p> <h2>Map Functions #map-functions</h2> <p>Maps in Sass are immutable; all map functions return a new map rather than updating the existing map in-place.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#map_get-instance_method" title="Sass::Script::Functions#map_get (method)">map-get($map, $key)</a></span> : Returns the value in a map associated with a given key.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#map_merge-instance_method" title="Sass::Script::Functions#map_merge (method)">map-merge($map1, $map2)</a></span> : Merges two maps together into a new map.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#map_remove-instance_method" title="Sass::Script::Functions#map_remove (method)">map-remove($map, $keys...)</a></span> : Returns a new map with keys removed.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#map_keys-instance_method" title="Sass::Script::Functions#map_keys (method)">map-keys($map)</a></span> : Returns a list of all keys in a map.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#map_values-instance_method" title="Sass::Script::Functions#map_values (method)">map-values($map)</a></span> : Returns a list of all values in a map.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#map_has_key-instance_method" title="Sass::Script::Functions#map_has_key (method)">map-has-key($map, $key)</a></span> : Returns whether a map has a value associated with a given key.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#keywords-instance_method" title="Sass::Script::Functions#keywords (method)">keywords($args)</a></span> : Returns the keywords passed to a function that takes variable arguments.</p> <h2>Selector Functions</h2> <p>Selector functions are very liberal in the formats they support for selector arguments. They can take a plain string, a list of lists as returned by <code>&amp;</code> or anything in between:</p> <ul> <li>A plain string, such as <code>".foo .bar, .baz .bang"</code>.</li> <li>A space-separated list of strings such as <code>(".foo" ".bar")</code>.</li> <li>A comma-separated list of strings such as <code>(".foo .bar", ".baz .bang")</code>.</li> <li>A comma-separated list of space-separated lists of strings such as <code>((".foo" ".bar"), (".baz" ".bang"))</code>.</li> </ul> <p>In general, selector functions allow placeholder selectors (<code>%foo</code>) but disallow parent-reference selectors (<code>&amp;</code>).</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_nest-instance_method" title="Sass::Script::Functions#selector_nest (method)">selector-nest($selectors...)</a></span> : Nests selector beneath one another like they would be nested in the stylesheet.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_append-instance_method" title="Sass::Script::Functions#selector_append (method)">selector-append($selectors...)</a></span> : Appends selectors to one another without spaces in between.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_extend-instance_method" title="Sass::Script::Functions#selector_extend (method)">selector-extend($selector, $extendee, $extender)</a></span> : Extends <code>$extendee</code> with <code>$extender</code> within <code>$selector</code>.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_replace-instance_method" title="Sass::Script::Functions#selector_replace (method)">selector-replace($selector, $original, $replacement)</a></span> : Replaces <code>$original</code> with <code>$replacement</code> within <code>$selector</code>.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_unify-instance_method" title="Sass::Script::Functions#selector_unify (method)">selector-unify($selector1, $selector2)</a></span> : Unifies two selectors to produce a selector that matches elements matched by both.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#is_superselector-instance_method" title="Sass::Script::Functions#is_superselector (method)">is-superselector($super, $sub)</a></span> : Returns whether <code>$super</code> matches all the elements <code>$sub</code> does, and possibly more.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#simple_selectors-instance_method" title="Sass::Script::Functions#simple_selectors (method)">simple-selectors($selector)</a></span> : Returns the simple selectors that comprise a compound selector.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_parse-instance_method" title="Sass::Script::Functions#selector_parse (method)">selector-parse($selector)</a></span> : Parses a selector into the format returned by <code>&amp;</code>.</p> <h2>Introspection Functions</h2> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#feature_exists-instance_method" title="Sass::Script::Functions#feature_exists (method)">feature-exists($feature)</a></span> : Returns whether a feature exists in the current Sass runtime.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#variable_exists-instance_method" title="Sass::Script::Functions#variable_exists (method)">variable-exists($name)</a></span> : Returns whether a variable with the given name exists in the current scope.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#global_variable_exists-instance_method" title="Sass::Script::Functions#global_variable_exists (method)">global-variable-exists($name)</a></span> : Returns whether a variable with the given name exists in the global scope.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#function_exists-instance_method" title="Sass::Script::Functions#function_exists (method)">function-exists($name)</a></span> : Returns whether a function with the given name exists.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#mixin_exists-instance_method" title="Sass::Script::Functions#mixin_exists (method)">mixin-exists($name)</a></span> : Returns whether a mixin with the given name exists.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#content_exists-instance_method" title="Sass::Script::Functions#content_exists (method)">content-exists()</a></span> : Returns whether the current mixin was passed a content block.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#inspect-instance_method" title="Sass::Script::Functions#inspect (method)">inspect($value)</a></span> : Returns the string representation of a value as it would be represented in Sass.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#type_of-instance_method" title="Sass::Script::Functions#type_of (method)">type-of($value)</a></span> : Returns the type of a value.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#unit-instance_method" title="Sass::Script::Functions#unit (method)">unit($number)</a></span> : Returns the unit(s) associated with a number.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#unitless-instance_method" title="Sass::Script::Functions#unitless (method)">unitless($number)</a></span> : Returns whether a number has units.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#comparable-instance_method" title="Sass::Script::Functions#comparable (method)">comparable($number1, $number2)</a></span> : Returns whether two numbers can be added, subtracted, or compared.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#call-instance_method" title="Sass::Script::Functions#call (method)">call($function, $args...)</a></span> : Dynamically calls a Sass function reference returned by <code>get-function</code>.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#get_function-instance_method" title="Sass::Script::Functions#get_function (method)">get-function($name, $css: false)</a></span> : Looks up a function with the given name in the current lexical scope and returns a reference to it.</p> <h2>Miscellaneous Functions</h2> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#if-instance_method" title="Sass::Script::Functions#if (method)">if($condition, $if-true, $if-false)</a></span> : Returns one of two values, depending on whether or not <code>$condition</code> is true.</p> <p><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#unique_id-instance_method" title="Sass::Script::Functions#unique_id (method)">unique-id()</a></span> : Returns a unique CSS identifier.</p> <h2>Adding Custom Functions</h2> <p>New Sass functions can be added by adding Ruby methods to this module. For example:</p> <pre class="code ruby"><code class="ruby">module Sass::Script::Functions
  def reverse(string)
    assert_type string, :String
    Sass::Script::Value::String.new(string.value.reverse)
  end
  declare :reverse, [:string]
end
</code></pre> <p>Calling <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#declare-class_method" title="Sass::Script::Functions.declare (method)">Functions.declare</a></span> tells Sass the argument names for your function. If omitted, the function will still work, but will not be able to accept keyword arguments. <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#declare-class_method" title="Sass::Script::Functions.declare (method)">Functions.declare</a></span> can also allow your function to take arbitrary keyword arguments.</p> <p>There are a few things to keep in mind when modifying this module. First of all, the arguments passed are <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value.html" title="Sass::Script::Value (module)">Value</a></span> objects. Value objects are also expected to be returned. This means that Ruby values must be unwrapped and wrapped.</p> <p>Most Value objects support the <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html#value-instance_method" title="Sass::Script::Value::Base#value (method)">value</a></span> accessor for getting their Ruby values. Color objects, though, must be accessed using <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html#rgb-instance_method" title="Sass::Script::Value::Color#rgb (method)">rgb</a></span>, <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html#red-instance_method" title="Sass::Script::Value::Color#red (method)">red</a></span>, <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html#blue-instance_method" title="Sass::Script::Value::Color#blue (method)">green</a></span>, or <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html#blue-instance_method" title="Sass::Script::Value::Color#blue (method)">blue</a></span>.</p> <p>Second, making Ruby functions accessible from Sass introduces the temptation to do things like database access within stylesheets. This is generally a bad idea; since Sass files are by default only compiled once, dynamic code is not a great fit.</p> <p>If you really, really need to compile Sass on each request, first make sure you have adequate caching set up. Then you can use <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Engine.html" title="Sass::Engine (class)">Engine</a></span> to render the code, using the <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#custom-option" title="&lt;code&gt;options&lt;/code&gt; parameter"><code>options</code> parameter</a> to pass in data that <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions/EvaluationContext.html#options-instance_method" title="Sass::Script::Functions::EvaluationContext#options (method)">can be accessed</a></span> from your Sass functions.</p> <p>Within one of the functions in this module, methods of <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions/EvaluationContext.html" title="Sass::Script::Functions::EvaluationContext (class)">EvaluationContext</a></span> can be used.</p> <h3>Caveats</h3> <p>When creating new <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value.html" title="Sass::Script::Value (module)">Value</a></span> objects within functions, be aware that it's not safe to call <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html#to_s-instance_method" title="Sass::Script::Value::Base#to_s (method)">#to_s</a></span> (or other methods that use the string representation) on those objects without first setting <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Tree/Node.html#options%3D-instance_method" title="Sass::Script::Tree::Node#options= (method)">the #options attribute</a></span>.</p> </div> </div> <div class="tags"> </div><h2>Defined Under Namespace</h2> <p class="children"> <strong class="classes">Classes:</strong> <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions/EvaluationContext.html" title="Sass::Script::Functions::EvaluationContext (class)">EvaluationContext</a></span>, <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions/Signature.html" title="Sass::Script::Functions::Signature (class)">Signature</a></span> </p> <h2> Class Method Summary <small>(<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="summary_toggle">collapse</a>)</small> </h2> <ul class="summary"> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#declare-class_method" title="declare (class method)">+ <strong>declare</strong>(method_name, args, options = {}) </a> </span> <span class="summary_desc"><div class="inline"><p>Declare a Sass signature for a Ruby-defined function.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#random_number_generator-class_method" title="random_number_generator (class method)">+ (Random) <strong>random_number_generator</strong> </a> </span> <span class="summary_desc"><div class="inline"><p>Get Sass's internal random number generator.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#random_seed%3D-class_method" title="random_seed= (class method)">+ (Integer) <strong>random_seed=</strong>(seed) </a> </span> <span class="summary_desc"><div class="inline"><p>Sets the random seed used by Sass's internal random number generator.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#signature-class_method" title="signature (class method)">+ ({Symbol =&gt; Object}<sup>?</sup>) <strong>signature</strong>(method_name, arg_arity, kwarg_arity) </a> </span> <span class="summary_desc"><div class="inline"><p>Determine the correct signature for the number of arguments passed in for a given function.</p> </div></span> </li> </ul> <h2> Instance Method Summary <small>(<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="summary_toggle">collapse</a>)</small> </h2> <ul class="summary"> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#abs-instance_method" title="#abs (instance method)">- (Sass::Script::Value::Number) <strong>abs</strong>($number) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns the absolute value of a number.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#adjust_color-instance_method" title="#adjust_color (instance method)">- (Sass::Script::Value::Color) <strong>adjust_color</strong>($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha]) </a> </span> <span class="summary_desc"><div class="inline"><p>Increases or decreases one or more properties of a color.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#adjust_hue-instance_method" title="#adjust_hue (instance method)">- (Sass::Script::Value::Color) <strong>adjust_hue</strong>($color, $degrees) </a> </span> <span class="summary_desc"><div class="inline"><p>Changes the hue of a color.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#alpha-instance_method" title="#alpha (instance method)">- (Sass::Script::Value::Number) <strong>alpha</strong>($color) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns the alpha component (opacity) of a color.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#append-instance_method" title="#append (instance method)">- (Sass::Script::Value::List) <strong>append</strong>($list, $val, $separator:auto) </a> </span> <span class="summary_desc"><div class="inline"><p>Appends a single value onto the end of a list.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#blue-instance_method" title="#blue (instance method)">- (Sass::Script::Value::Number) <strong>blue</strong>($color) </a> </span> <span class="summary_desc"><div class="inline"><p>Gets the blue component of a color.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#call-instance_method" title="#call (instance method)">- <strong>call</strong>($function, $args...) </a> </span> <span class="summary_desc"><div class="inline"><p>Dynamically calls a function.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#ceil-instance_method" title="#ceil (instance method)">- (Sass::Script::Value::Number) <strong>ceil</strong>($number) </a> </span> <span class="summary_desc"><div class="inline"><p>Rounds a number up to the next whole number.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#change_color-instance_method" title="#change_color (instance method)">- (Sass::Script::Value::Color) <strong>change_color</strong>($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha]) </a> </span> <span class="summary_desc"><div class="inline"><p>Changes one or more properties of a color.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#comparable-instance_method" title="#comparable (instance method)">- (Sass::Script::Value::Bool) <strong>comparable</strong>($number1, $number2) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns whether two numbers can added, subtracted, or compared.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#complement-instance_method" title="#complement (instance method)">- (Sass::Script::Value::Color) <strong>complement</strong>($color) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns the complement of a color.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#content_exists-instance_method" title="#content_exists (instance method)">- (Sass::Script::Value::Bool) <strong>content_exists</strong> </a> </span> <span class="summary_desc"><div class="inline"><p>Check whether a mixin was passed a content block.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#counter-instance_method" title="#counter (instance method)">- (Sass::Script::Value::String) <strong>counter</strong>($args...) </a> </span> <span class="summary_desc"><div class="inline"><p>This function only exists as a workaround for IE7's <a href="http://jes.st/2013/ie7s-css-breaking-content-counter-bug/" target="_parent"><code>content: counter</code> bug</a>.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#counters-instance_method" title="#counters (instance method)">- (Sass::Script::Value::String) <strong>counters</strong>($args...) </a> </span> <span class="summary_desc"><div class="inline"><p>This function only exists as a workaround for IE7's <a href="http://jes.st/2013/ie7s-css-breaking-content-counter-bug/" target="_parent"><code>content: counter</code> bug</a>.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#darken-instance_method" title="#darken (instance method)">- (Sass::Script::Value::Color) <strong>darken</strong>($color, $amount) </a> </span> <span class="summary_desc"><div class="inline"><p>Makes a color darker.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#desaturate-instance_method" title="#desaturate (instance method)">- (Sass::Script::Value::Color) <strong>desaturate</strong>($color, $amount) </a> </span> <span class="summary_desc"><div class="inline"><p>Makes a color less saturated.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#feature_exists-instance_method" title="#feature_exists (instance method)">- (Sass::Script::Value::Bool) <strong>feature_exists</strong>($feature) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns whether a feature exists in the current Sass runtime.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#floor-instance_method" title="#floor (instance method)">- (Sass::Script::Value::Number) <strong>floor</strong>($number) </a> </span> <span class="summary_desc"><div class="inline"><p>Rounds a number down to the previous whole number.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#function_exists-instance_method" title="#function_exists (instance method)">- (Sass::Script::Value::Bool) <strong>function_exists</strong>($name) </a> </span> <span class="summary_desc"><div class="inline"><p>Check whether a function with the given name exists.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#get_function-instance_method" title="#get_function (instance method)">- (Sass::Script::Value::Function) <strong>get_function</strong>($name, $css:false) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns a reference to a function for later invocation with the <code>call()</code> function.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#global_variable_exists-instance_method" title="#global_variable_exists (instance method)">- (Sass::Script::Value::Bool) <strong>global_variable_exists</strong>($name) </a> </span> <span class="summary_desc"><div class="inline"><p>Check whether a variable with the given name exists in the global scope (at the top level of the file).</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#grayscale-instance_method" title="#grayscale (instance method)">- (Sass::Script::Value::Color) <strong>grayscale</strong>($color) </a> </span> <span class="summary_desc"><div class="inline"><p>Converts a color to grayscale.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#green-instance_method" title="#green (instance method)">- (Sass::Script::Value::Number) <strong>green</strong>($color) </a> </span> <span class="summary_desc"><div class="inline"><p>Gets the green component of a color.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#hsl-instance_method" title="#hsl (instance method)">- (Sass::Script::Value::Color) <strong>hsl</strong>($hue, $saturation, $lightness) </a> </span> <span class="summary_desc"><div class="inline"><p>Creates a <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Color</a></span> from hue, saturation, and lightness values.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#hsla-instance_method" title="#hsla (instance method)">- (Sass::Script::Value::Color) <strong>hsla</strong>($hue, $saturation, $lightness, $alpha) </a> </span> <span class="summary_desc"><div class="inline"><p>Creates a <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Color</a></span> from hue, saturation, lightness, and alpha values.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#hue-instance_method" title="#hue (instance method)">- (Sass::Script::Value::Number) <strong>hue</strong>($color) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns the hue component of a color.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#ie_hex_str-instance_method" title="#ie_hex_str (instance method)">- (Sass::Script::Value::String) <strong>ie_hex_str</strong>($color) </a> </span> <span class="summary_desc"><div class="inline"><p>Converts a color into the format understood by IE filters.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#if-instance_method" title="#if (instance method)">- (Sass::Script::Value::Base) <strong>if</strong>($condition, $if-true, $if-false) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns one of two values, depending on whether or not <code>$condition</code> is true.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#index-instance_method" title="#index (instance method)">- (Sass::Script::Value::Number, Sass::Script::Value::Null) <strong>index</strong>($list, $value) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns the position of a value within a list.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#inspect-instance_method" title="#inspect (instance method)">- (Sass::Script::Value::String) <strong>inspect</strong>($value) </a> </span> <span class="summary_desc"><div class="inline"><p>Return a string containing the value as its Sass representation.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#invert-instance_method" title="#invert (instance method)">- (Sass::Script::Value::Color) <strong>invert</strong>(color, weight = number(100)) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns the inverse (negative) of a color.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#is_bracketed-instance_method" title="#is_bracketed (instance method)">- (Sass::Script::Value::Bool) <strong>is_bracketed</strong>($list) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns whether a list uses square brackets.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#is_superselector-instance_method" title="#is_superselector (instance method)">- (Sass::Script::Value::Bool) <strong>is_superselector</strong>($super, $sub) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns whether <code>$super</code> is a superselector of <code>$sub</code>.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#join-instance_method" title="#join (instance method)">- (Sass::Script::Value::List) <strong>join</strong>($list1, $list2, $separator:auto, $bracketed:auto) </a> </span> <span class="summary_desc"><div class="inline"><p>Joins together two lists into one.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#keywords-instance_method" title="#keywords (instance method)">- (Sass::Script::Value::Map) <strong>keywords</strong>($args) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns the map of named arguments passed to a function or mixin that takes a variable argument list.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#length-instance_method" title="#length (instance method)">- (Sass::Script::Value::Number) <strong>length</strong>($list) </a> </span> <span class="summary_desc"><div class="inline"><p>Return the length of a list.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#lighten-instance_method" title="#lighten (instance method)">- (Sass::Script::Value::Color) <strong>lighten</strong>($color, $amount) </a> </span> <span class="summary_desc"><div class="inline"><p>Makes a color lighter.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#lightness-instance_method" title="#lightness (instance method)">- (Sass::Script::Value::Number) <strong>lightness</strong>($color) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns the lightness component of a color.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#list_separator-instance_method" title="#list_separator (instance method)">- (Sass::Script::Value::String) <strong>list_separator</strong>($list) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns the separator of a list.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#map_get-instance_method" title="#map_get (instance method)">- (Sass::Script::Value::Base) <strong>map_get</strong>($map, $key) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns the value in a map associated with the given key.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#map_has_key-instance_method" title="#map_has_key (instance method)">- (Sass::Script::Value::Bool) <strong>map_has_key</strong>($map, $key) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns whether a map has a value associated with a given key.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#map_keys-instance_method" title="#map_keys (instance method)">- (List) <strong>map_keys</strong>($map) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns a list of all keys in a map.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#map_merge-instance_method" title="#map_merge (instance method)">- (Sass::Script::Value::Map) <strong>map_merge</strong>($map1, $map2) </a> </span> <span class="summary_desc"><div class="inline"><p>Merges two maps together into a new map.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#map_remove-instance_method" title="#map_remove (instance method)">- (Sass::Script::Value::Map) <strong>map_remove</strong>($map, $keys...) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns a new map with keys removed.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#map_values-instance_method" title="#map_values (instance method)">- (List) <strong>map_values</strong>($map) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns a list of all values in a map.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#max-instance_method" title="#max (instance method)">- (Sass::Script::Value::Number) <strong>max</strong>($numbers...) </a> </span> <span class="summary_desc"><div class="inline"><p>Finds the maximum of several numbers.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#min-instance_method" title="#min (instance method)">- (Sass::Script::Value::Number) <strong>min</strong>($numbers...) </a> </span> <span class="summary_desc"><div class="inline"><p>Finds the minimum of several numbers.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method" title="#mix (instance method)">- (Sass::Script::Value::Color) <strong>mix</strong>($color1, $color2, $weight:50%) </a> </span> <span class="summary_desc"><div class="inline"><p>Mixes two colors together.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#mixin_exists-instance_method" title="#mixin_exists (instance method)">- (Sass::Script::Value::Bool) <strong>mixin_exists</strong>($name) </a> </span> <span class="summary_desc"><div class="inline"><p>Check whether a mixin with the given name exists.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#nth-instance_method" title="#nth (instance method)">- (Sass::Script::Value::Base) <strong>nth</strong>($list, $n) </a> </span> <span class="summary_desc"><div class="inline"><p>Gets the nth item in a list.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#opacify-instance_method" title="#opacify (instance method)">- (Sass::Script::Value::Color) <strong>opacify</strong>($color, $amount) </a> (also: #fade_in) </span> <span class="summary_desc"><div class="inline"><p>Makes a color more opaque.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#opacity-instance_method" title="#opacity (instance method)">- (Sass::Script::Value::Number) <strong>opacity</strong>($color) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns the alpha component (opacity) of a color.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#percentage-instance_method" title="#percentage (instance method)">- (Sass::Script::Value::Number) <strong>percentage</strong>($number) </a> </span> <span class="summary_desc"><div class="inline"><p>Converts a unitless number to a percentage.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#quote-instance_method" title="#quote (instance method)">- (Sass::Script::Value::String) <strong>quote</strong>($string) </a> </span> <span class="summary_desc"><div class="inline"><p>Add quotes to a string if the string isn't quoted, or returns the same string if it is.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#random-instance_method" title="#random (instance method)">- <strong>random</strong>(limit = nil) </a> </span> <span class="summary_desc"><div class="inline"></div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#red-instance_method" title="#red (instance method)">- (Sass::Script::Value::Number) <strong>red</strong>($color) </a> </span> <span class="summary_desc"><div class="inline"><p>Gets the red component of a color.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#rgb-instance_method" title="#rgb (instance method)">- (Sass::Script::Value::Color) <strong>rgb</strong>($red, $green, $blue) </a> </span> <span class="summary_desc"><div class="inline"><p>Creates a <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Color</a></span> object from red, green, and blue values.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#rgba-instance_method" title="#rgba (instance method)">- <strong>rgba</strong>(*args) </a> </span> <span class="summary_desc"><div class="inline"><p>Creates a <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Color</a></span> from red, green, blue, and alpha values.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#round-instance_method" title="#round (instance method)">- (Sass::Script::Value::Number) <strong>round</strong>($number) </a> </span> <span class="summary_desc"><div class="inline"><p>Rounds a number to the nearest whole number.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#saturate-instance_method" title="#saturate (instance method)">- (Sass::Script::Value::Color) <strong>saturate</strong>($color, $amount) </a> </span> <span class="summary_desc"><div class="inline"><p>Makes a color more saturated.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#saturation-instance_method" title="#saturation (instance method)">- (Sass::Script::Value::Number) <strong>saturation</strong>($color) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns the saturation component of a color.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#scale_color-instance_method" title="#scale_color (instance method)">- (Sass::Script::Value::Color) <strong>scale_color</strong>($color, [$red], [$green], [$blue], [$saturation], [$lightness], [$alpha]) </a> </span> <span class="summary_desc"><div class="inline"><p>Fluidly scales one or more properties of a color.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_append-instance_method" title="#selector_append (instance method)">- (Sass::Script::Value::List) <strong>selector_append</strong>($selectors...) </a> </span> <span class="summary_desc"><div class="inline"><p>Return a new selector with all selectors in <code>$selectors</code> appended one another as though they had been nested in the stylesheet as <code>$selector1 { &amp;$selector2 { ... } }</code>.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_extend-instance_method" title="#selector_extend (instance method)">- (Sass::Script::Value::List) <strong>selector_extend</strong>($selector, $extendee, $extender) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns a new version of <code>$selector</code> with <code>$extendee</code> extended with <code>$extender</code>.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_nest-instance_method" title="#selector_nest (instance method)">- (Sass::Script::Value::List) <strong>selector_nest</strong>($selectors...) </a> </span> <span class="summary_desc"><div class="inline"><p>Return a new selector with all selectors in <code>$selectors</code> nested beneath one another as though they had been nested in the stylesheet as <code>$selector1 { $selector2 { ... } }</code>.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_parse-instance_method" title="#selector_parse (instance method)">- (Sass::Script::Value::List) <strong>selector_parse</strong>($selector) </a> </span> <span class="summary_desc"><div class="inline"><p>Parses a user-provided selector into a list of lists of strings as returned by <code>&amp;</code>.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_replace-instance_method" title="#selector_replace (instance method)">- (Sass::Script::Value::List) <strong>selector_replace</strong>($selector, $original, $replacement) </a> </span> <span class="summary_desc"><div class="inline"><p>Replaces all instances of <code>$original</code> with <code>$replacement</code> in <code>$selector</code>.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_unify-instance_method" title="#selector_unify (instance method)">- (Sass::Script::Value::List, Sass::Script::Value::Null) <strong>selector_unify</strong>($selector1, $selector2) </a> </span> <span class="summary_desc"><div class="inline"><p>Unifies two selectors into a single selector that matches only elements matched by both input selectors.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#set_nth-instance_method" title="#set (instance method)">- (Sass::Script::Value::List) <strong>set</strong> </a> </span> <span class="summary_desc"><div class="inline"><p>Return a new list, based on the list provided, but with the nth element changed to the value given.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#simple_selectors-instance_method" title="#simple_selectors (instance method)">- (Sass::Script::Value::List) <strong>simple_selectors</strong>($selector) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns the <a href="http://dev.w3.org/csswg/selectors4/#simple" target="_parent">simple selectors</a> that comprise the compound selector <code>$selector</code>.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#str_index-instance_method" title="#str_index (instance method)">- (Sass::Script::Value::Number, Sass::Script::Value::Null) <strong>str_index</strong>($string, $substring) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns the index of the first occurrence of <code>$substring</code> in <code>$string</code>.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#str_insert-instance_method" title="#str_insert (instance method)">- (Sass::Script::Value::String) <strong>str_insert</strong>($string, $insert, $index) </a> </span> <span class="summary_desc"><div class="inline"><p>Inserts <code>$insert</code> into <code>$string</code> at <code>$index</code>.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#str_length-instance_method" title="#str_length (instance method)">- (Sass::Script::Value::Number) <strong>str_length</strong>($string) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns the number of characters in a string.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#str_slice-instance_method" title="#str_slice (instance method)">- (Sass::Script::Value::String) <strong>str_slice</strong>($string, $start-at, $end-at:-1) </a> </span> <span class="summary_desc"><div class="inline"><p>Extracts a substring from <code>$string</code>.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#to_lower_case-instance_method" title="#to_lower_case (instance method)">- (Sass::Script::Value::String) <strong>to_lower_case</strong>($string) </a> </span> <span class="summary_desc"><div class="inline"><p>Convert a string to lower case,.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#to_upper_case-instance_method" title="#to_upper_case (instance method)">- (Sass::Script::Value::String) <strong>to_upper_case</strong>($string) </a> </span> <span class="summary_desc"><div class="inline"><p>Converts a string to upper case.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#transparentize-instance_method" title="#transparentize (instance method)">- (Sass::Script::Value::Color) <strong>transparentize</strong>($color, $amount) </a> (also: #fade_out) </span> <span class="summary_desc"><div class="inline"><p>Makes a color more transparent.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#type_of-instance_method" title="#type_of (instance method)">- (Sass::Script::Value::String) <strong>type_of</strong>($value) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns the type of a value.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#unique_id-instance_method" title="#unique_id (instance method)">- (Sass::Script::Value::String) <strong>unique_id</strong> </a> </span> <span class="summary_desc"><div class="inline"><p>Returns a unique CSS identifier.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#unit-instance_method" title="#unit (instance method)">- (Sass::Script::Value::String) <strong>unit</strong>($number) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns the unit(s) associated with a number.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#unitless-instance_method" title="#unitless (instance method)">- (Sass::Script::Value::Bool) <strong>unitless</strong>($number) </a> </span> <span class="summary_desc"><div class="inline"><p>Returns whether a number has units.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#unquote-instance_method" title="#unquote (instance method)">- (Sass::Script::Value::String) <strong>unquote</strong>($string) </a> </span> <span class="summary_desc"><div class="inline"><p>Removes quotes from a string.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#variable_exists-instance_method" title="#variable_exists (instance method)">- (Sass::Script::Value::Bool) <strong>variable_exists</strong>($name) </a> </span> <span class="summary_desc"><div class="inline"><p>Check whether a variable with the given name exists in the current scope or in the global scope.</p> </div></span> </li> <li class="public "> <span class="summary_signature"> <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#zip-instance_method" title="#zip (instance method)">- (Sass::Script::Value::List) <strong>zip</strong>($lists...) </a> </span> <span class="summary_desc"><div class="inline"><p>Combines several lists into a single multidimensional list.</p> </div></span> </li> </ul> <div id="class_method_details" class="method_details_list"> <h2>Class Method Details</h2> <div class="method_details first"> <h3 class="signature first" id="declare-class_method"> + <strong>declare</strong>(method_name, args, options = {}) </h3><div class="docstring"> <div class="discussion"> <p>Declare a Sass signature for a Ruby-defined function. This includes the names of the arguments, whether the function takes a variable number of arguments, and whether the function takes an arbitrary set of keyword arguments.</p> <p>It's not necessary to declare a signature for a function. However, without a signature it won't support keyword arguments.</p> <p>A single function can have multiple signatures declared as long as each one takes a different number of arguments. It's also possible to declare multiple signatures that all take the same number of arguments, but none of them but the first will be used unless the user uses keyword arguments.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>declare :rgba, [:hex, :alpha]
declare :rgba, [:red, :green, :blue, :alpha]
declare :accepts_anything, [], :var_args =&gt; true, :var_kwargs =&gt; true
declare :some_func, [:foo, :bar, :baz], :var_kwargs =&gt; true</code></pre> </div> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">method_name</span> <span class="type">(<tt>Symbol</tt>)</span> — <div class="inline"><p>The name of the method whose signature is being declared.</p> </div> </li> <li> <span class="name">args</span> <span class="type">(<tt>Array&lt;Symbol&gt;</tt>)</span> — <div class="inline"><p>The names of the arguments for the function signature.</p> </div> </li> <li> <span class="name">options</span> <span class="type">(<tt>Hash</tt>)</span> <em class="default">(defaults to: <tt>{}</tt>)</em> — <div class="inline"><p>a customizable set of options</p> </div> </li> </ul> <p class="tag_title">Options Hash (<tt>options</tt>):</p> <ul class="option"> <li> <span class="name">:var_args</span> <span class="type">(<tt>Boolean</tt>)</span> <span class="default"> — default: <tt>false</tt> </span> — <div class="inline"><p>Whether the function accepts a variable number of (unnamed) arguments in addition to the named arguments.</p> </div> </li> <li> <span class="name">:var_kwargs</span> <span class="type">(<tt>Boolean</tt>)</span> <span class="default"> — default: <tt>false</tt> </span> — <div class="inline"><p>Whether the function accepts other keyword arguments in addition to those in <code>:args</code>. If this is true, the Ruby function will be passed a hash from strings to <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value.html" title="Sass::Script::Value (module)">Value</a></span>s as the last argument. In addition, if this is true and <code>:var_args</code> is not, Sass will ensure that the last argument passed is a hash.</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 416</span>

def self.declare(method_name, args, options = {})
  delayed_args = []
  args = args.map do |a|
    a = a.to_s
    if a[0] == ?&amp;
      a = a[1..-1]
      delayed_args &lt;&lt; a
    end
    a
  end
  # We don't expose this functionality except to certain builtin methods.
  if delayed_args.any? &amp;&amp; method_name != :if
    raise ArgumentError.new("Delayed arguments are not allowed for method #{method_name}")
  end
  @signatures[method_name] ||= []
  @signatures[method_name] &lt;&lt; Signature.new(
    args,
    delayed_args,
    options[:var_args],
    options[:var_kwargs],
    options[:deprecated] &amp;&amp; options[:deprecated].map {|a| a.to_s})
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="random_number_generator-class_method"> + (<tt>Random</tt>) <strong>random_number_generator</strong> </h3><div class="docstring"> <div class="discussion"> <p>Get Sass's internal random number generator.</p> </div> </div> <div class="tags"> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt>Random</tt>)</span> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

490
491
492</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 490</span>

def self.random_number_generator
  @random_number_generator ||= Random.new
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="random_seed=-class_method"> + (<tt>Integer</tt>) <strong>random_seed=</strong>(seed) </h3><div class="docstring"> <div class="discussion"> <p>Sets the random seed used by Sass's internal random number generator.</p> <p>This can be used to ensure consistent random number sequences which allows for consistent results when testing, etc.</p> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">seed</span> <span class="type">(<tt>Integer</tt>)</span> </li> </ul> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt>Integer</tt>)</span> — <div class="inline"><p>The same seed.</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

483
484
485</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 483</span>

def self.random_seed=(seed)
  @random_number_generator = Random.new(seed)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="signature-class_method"> + (<tt>{Symbol =&gt; Object}</tt><sup>?</sup>) <strong>signature</strong>(method_name, arg_arity, kwarg_arity) </h3><div class="docstring"> <div class="discussion"> <p>Determine the correct signature for the number of arguments passed in for a given function. If no signatures match, the first signature is returned for error messaging.</p> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">method_name</span> <span class="type">(<tt>Symbol</tt>)</span> — <div class="inline"><p>The name of the Ruby function to be called.</p> </div> </li> <li> <span class="name">arg_arity</span> <span class="type">(<tt>Integer</tt>)</span> — <div class="inline"><p>The number of unnamed arguments the function was passed.</p> </div> </li> <li> <span class="name">kwarg_arity</span> <span class="type">(<tt>Integer</tt>)</span> — <div class="inline"><p>The number of keyword arguments the function was passed.</p> </div> </li> </ul> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt>{Symbol =&gt; Object}</tt>, <tt>nil</tt>)</span> — <div class="inline"><p>The signature options for the matching signature, or nil if no signatures are declared for this function. See <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#declare-class_method" title="Sass::Script::Functions.declare (method)">declare</a></span>.</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 450</span>

def self.signature(method_name, arg_arity, kwarg_arity)
  return unless @signatures[method_name]
  @signatures[method_name].each do |signature|
    sig_arity = signature.args.size
    return signature if sig_arity == arg_arity + kwarg_arity
    next unless sig_arity &lt; arg_arity + kwarg_arity

    # We have enough args.
    # Now we need to figure out which args are varargs
    # and if the signature allows them.
    t_arg_arity, t_kwarg_arity = arg_arity, kwarg_arity
    if sig_arity &gt; t_arg_arity
      # we transfer some kwargs arity to args arity
      # if it does not have enough args -- assuming the names will work out.
      t_kwarg_arity -= (sig_arity - t_arg_arity)
      t_arg_arity = sig_arity
    end

    if (t_arg_arity == sig_arity || t_arg_arity &gt; sig_arity &amp;&amp; signature.var_args) &amp;&amp;
       (t_kwarg_arity == 0 || t_kwarg_arity &gt; 0 &amp;&amp; signature.var_kwargs)
      return signature
    end
  end
  @signatures[method_name].first
end</pre> </td> </tr> </tbody></table> </div> </div> <div id="instance_method_details" class="method_details_list"> <h2>Instance Method Details</h2> <div class="method_details first"> <h3 class="signature first" id="abs-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>abs</strong>($number) </h3><div class="docstring"> <div class="discussion"> <p>Returns the absolute value of a number.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>abs(10px) =&gt; 10px
abs(-10px) =&gt; 10px</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$number</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$number</code> isn't a number</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1865
1866
1867</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1865</span>

def abs(number)
  numeric_transformation(number) {|n| n.abs}
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="adjust_color-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>adjust_color</strong>($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha]) </h3><div class="docstring"> <div class="discussion"> <p>Increases or decreases one or more properties of a color. This can change the red, green, blue, hue, saturation, value, and alpha properties. The properties are specified as keyword arguments, and are added to or subtracted from the color's current value for that property.</p> <p>All properties are optional. You can't specify both RGB properties (<code>$red</code>, <code>$green</code>, <code>$blue</code>) and HSL properties (<code>$hue</code>, <code>$saturation</code>, <code>$value</code>) at the same time.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>adjust-color(#102030, $blue: 5) =&gt; #102035
adjust-color(#102030, $red: -5, $blue: 5) =&gt; #0b2035
adjust-color(hsl(25, 100%, 80%), $lightness: -30%, $alpha: -0.4) =&gt; hsla(25, 100%, 50%, 0.6)</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> <li> <span class="name">$red</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The adjustment to make on the red component, between -255 and 255 inclusive</p> </div> </li> <li> <span class="name">$green</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The adjustment to make on the green component, between -255 and 255 inclusive</p> </div> </li> <li> <span class="name">$blue</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The adjustment to make on the blue component, between -255 and 255 inclusive</p> </div> </li> <li> <span class="name">$hue</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The adjustment to make on the hue component, in degrees</p> </div> </li> <li> <span class="name">$saturation</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The adjustment to make on the saturation component, between <code>-100%</code> and <code>100%</code> inclusive</p> </div> </li> <li> <span class="name">$lightness</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The adjustment to make on the lightness component, between <code>-100%</code> and <code>100%</code> inclusive</p> </div> </li> <li> <span class="name">$alpha</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The adjustment to make on the alpha component, between -1 and 1 inclusive</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if any parameter is the wrong type or out-of bounds, or if RGB properties and HSL properties are adjusted at the same time</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1147
1148
1149
1150
1151
1152
1153
1154
1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1171
1172
1173</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1147</span>

def adjust_color(color, kwargs)
  assert_type color, :Color, :color
  with = Sass::Util.map_hash(
    "red" =&gt; [-255..255, ""],
    "green" =&gt; [-255..255, ""],
    "blue" =&gt; [-255..255, ""],
    "hue" =&gt; nil,
    "saturation" =&gt; [-100..100, "%"],
    "lightness" =&gt; [-100..100, "%"],
    "alpha" =&gt; [-1..1, ""]
  ) do |name, (range, units)|
    val = kwargs.delete(name)
    next unless val
    assert_type val, :Number, name
    Sass::Util.check_range("$#{name}: Amount", range, val, units) if range
    adjusted = color.send(name) + val.value
    adjusted = [0, Sass::Util.restrict(adjusted, range)].max if range
    [name.to_sym, adjusted]
  end

  unless kwargs.empty?
    name, val = kwargs.to_a.first
    raise ArgumentError.new("Unknown argument $#{name} (#{val})")
  end

  color.with(with)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="adjust_hue-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>adjust_hue</strong>($color, $degrees) </h3><div class="docstring"> <div class="discussion"> <p>Changes the hue of a color. Takes a color and a number of degrees (usually between <code>-360deg</code> and <code>360deg</code>), and returns a color with the hue rotated along the color wheel by that amount.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>adjust-hue(hsl(120, 30%, 90%), 60deg) =&gt; hsl(180, 30%, 90%)
adjust-hue(hsl(120, 30%, 90%), -60deg) =&gt; hsl(60, 30%, 90%)
adjust-hue(#811, 45deg) =&gt; #886a11</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> <li> <span class="name">$degrees</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The number of degrees to rotate the hue</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if either parameter is the wrong type</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1089
1090
1091
1092
1093</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1089</span>

def adjust_hue(color, degrees)
  assert_type color, :Color, :color
  assert_type degrees, :Number, :degrees
  color.with(:hue =&gt; color.hue + degrees.value)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="alpha-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>alpha</strong>($color) </h3><div class="docstring"> <div class="discussion"> <p>Returns the alpha component (opacity) of a color. This is 1 unless otherwise specified.</p> <p>This function also supports the proprietary Microsoft <code>alpha(opacity=20)</code> syntax as a special case.</p> </div> </div> <div class="tags"> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The alpha component, between 0 and 1</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$color</code> isn't a color</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

919
920
921
922
923
924
925
926
927
928
929
930
931
932</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 919</span>

def alpha(*args)
  if args.all? do |a|
       a.is_a?(Sass::Script::Value::String) &amp;&amp; a.type == :identifier &amp;&amp;
         a.value =~ /^[a-zA-Z]+\s*=/
     end
    # Support the proprietary MS alpha() function
    return identifier("alpha(#{args.map {|a| a.to_s}.join(', ')})")
  end

  raise ArgumentError.new("wrong number of arguments (#{args.size} for 1)") if args.size != 1

  assert_type args.first, :Color, :color
  number(args.first.alpha)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="append-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>) <strong>append</strong>($list, $val, $separator:auto) </h3><div class="docstring"> <div class="discussion"> <p>Appends a single value onto the end of a list.</p> <p>Unless the <code>$separator</code> argument is passed, if the list had only one item, the resulting list will be space-separated.</p> <p>Like all list functions, <code>append()</code> returns a new list rather than modifying its argument in place.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>append(10px 20px, 30px) =&gt; 10px 20px 30px
append((blue, red), green) =&gt; blue, red, green
append(10px 20px, 30px 40px) =&gt; 10px 20px (30px 40px)
append(10px, 20px, comma) =&gt; 10px, 20px
append((blue, red), green, space) =&gt; blue red green</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$list</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> </li> <li> <span class="name">$val</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> </li> <li> <span class="name">$separator</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> — <div class="inline"><p>The list separator to use. If this is <code>comma</code> or <code>space</code>, that separator will be used. If this is <code>auto</code> (the default), the separator is determined as explained above.</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2088
2089
2090
2091
2092
2093
2094
2095
2096
2097
2098
2099
2100</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2088</span>

def append(list, val, separator = identifier("auto"))
  assert_type separator, :String, :separator
  unless %w(auto space comma).include?(separator.value)
    raise ArgumentError.new("Separator name must be space, comma, or auto")
  end
  list.with_contents(list.to_a + [val],
    separator:
      if separator.value == 'auto'
        list.separator || :space
      else
        separator.value.to_sym
      end)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="blue-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>blue</strong>($color) </h3><div class="docstring"> <div class="discussion"> <p>Gets the blue component of a color. Calculated from HSL where necessary via <a href="http://www.w3.org/TR/css3-color/#hsl-color" target="_parent">this algorithm</a>.</p> </div> </div> <div class="tags"> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The blue component, between 0 and 255 inclusive</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$color</code> isn't a color</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

849
850
851
852</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 849</span>

def blue(color)
  assert_type color, :Color, :color
  number(color.blue)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="call-instance_method"> - <strong>call</strong>($function, $args...) </h3><div class="docstring"> <div class="discussion"> <p>Dynamically calls a function. This can call user-defined functions, built-in functions, or plain CSS functions. It will pass along all arguments, including keyword arguments, to the called function.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>call(rgb, 10, 100, 255) =&gt; #0a64ff
call(scale-color, #0a64ff, $lightness: -10%) =&gt; #0058ef

$fn: nth;
call($fn, (a b c), 2) =&gt; b</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$function</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Function.html" title="Sass::Script::Value::Function (class)">Sass::Script::Value::Function</a></span></tt>)</span> — <div class="inline"><p>The function to call.</p> </div> </li> </ul> </div> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2370
2371
2372
2373
2374
2375
2376
2377
2378
2379
2380
2381
2382
2383
2384
2385
2386
2387
2388
2389
2390
2391
2392
2393
2394
2395
2396
2397</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2370</span>

def call(name, *args)
  unless name.is_a?(Sass::Script::Value::String) ||
         name.is_a?(Sass::Script::Value::Function)
    assert_type name, :Function, :function
  end
  if name.is_a?(Sass::Script::Value::String)
    name = if function_exists(name).to_bool
             get_function(name)
           else
             get_function(name, "css" =&gt; bool(true))
           end
    Sass::Util.sass_warn(&lt;&lt;WARNING)
DEPRECATION WARNING: Passing a string to call() is deprecated and will be illegal
in Sass 4.0. Use call(#{name.to_sass}) instead.
WARNING
  end
  kwargs = args.last.is_a?(Hash) ? args.pop : {}
  funcall = Sass::Script::Tree::Funcall.new(
    name.value,
    args.map {|a| Sass::Script::Tree::Literal.new(a)},
    Sass::Util.map_vals(kwargs) {|v| Sass::Script::Tree::Literal.new(v)},
    nil,
    nil)
  funcall.line = environment.stack.frames.last.line
  funcall.filename = environment.stack.frames.last.filename
  funcall.options = options
  perform(funcall)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="ceil-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>ceil</strong>($number) </h3><div class="docstring"> <div class="discussion"> <p>Rounds a number up to the next whole number.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>ceil(10.4px) =&gt; 11px
ceil(10.6px) =&gt; 11px</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$number</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$number</code> isn't a number</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1837
1838
1839</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1837</span>

def ceil(number)
  numeric_transformation(number) {|n| n.ceil}
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="change_color-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>change_color</strong>($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha]) </h3><div class="docstring"> <div class="discussion"> <p>Changes one or more properties of a color. This can change the red, green, blue, hue, saturation, value, and alpha properties. The properties are specified as keyword arguments, and replace the color's current value for that property.</p> <p>All properties are optional. You can't specify both RGB properties (<code>$red</code>, <code>$green</code>, <code>$blue</code>) and HSL properties (<code>$hue</code>, <code>$saturation</code>, <code>$value</code>) at the same time.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>change-color(#102030, $blue: 5) =&gt; #102005
change-color(#102030, $red: 120, $blue: 5) =&gt; #782005
change-color(hsl(25, 100%, 80%), $lightness: 40%, $alpha: 0.8) =&gt; hsla(25, 100%, 40%, 0.8)</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> <li> <span class="name">$red</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The new red component for the color, within 0 and 255 inclusive</p> </div> </li> <li> <span class="name">$green</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The new green component for the color, within 0 and 255 inclusive</p> </div> </li> <li> <span class="name">$blue</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The new blue component for the color, within 0 and 255 inclusive</p> </div> </li> <li> <span class="name">$hue</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The new hue component for the color, in degrees</p> </div> </li> <li> <span class="name">$saturation</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The new saturation component for the color, between <code>0%</code> and <code>100%</code> inclusive</p> </div> </li> <li> <span class="name">$lightness</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The new lightness component for the color, within <code>0%</code> and <code>100%</code> inclusive</p> </div> </li> <li> <span class="name">$alpha</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The new alpha component for the color, within 0 and 1 inclusive</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if any parameter is the wrong type or out-of bounds, or if RGB properties and HSL properties are adjusted at the same time</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1279
1280
1281
1282
1283
1284
1285
1286
1287
1288
1289
1290
1291
1292
1293
1294
1295
1296
1297
1298
1299
1300
1301
1302
1303
1304
1305
1306
1307
1308
1309</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1279</span>

def change_color(color, kwargs)
  assert_type color, :Color, :color
  with = Sass::Util.map_hash(
    'red' =&gt; ['Red value', 0..255],
    'green' =&gt; ['Green value', 0..255],
    'blue' =&gt; ['Blue value', 0..255],
    'hue' =&gt; [],
    'saturation' =&gt; ['Saturation', 0..100, '%'],
    'lightness' =&gt; ['Lightness', 0..100, '%'],
    'alpha' =&gt; ['Alpha channel', 0..1]
  ) do |name, (desc, range, unit)|
    val = kwargs.delete(name)
    next unless val
    assert_type val, :Number, name

    if range
      val = Sass::Util.check_range(desc, range, val, unit)
    else
      val = val.value
    end

    [name.to_sym, val]
  end

  unless kwargs.empty?
    name, val = kwargs.to_a.first
    raise ArgumentError.new("Unknown argument $#{name} (#{val})")
  end

  color.with(with)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="comparable-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>) <strong>comparable</strong>($number1, $number2) </h3><div class="docstring"> <div class="discussion"> <p>Returns whether two numbers can added, subtracted, or compared.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>comparable(2px, 1px) =&gt; true
comparable(100px, 3em) =&gt; false
comparable(10cm, 3mm) =&gt; true</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$number1</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> <li> <span class="name">$number2</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if either parameter is the wrong type</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1790
1791
1792
1793
1794</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1790</span>

def comparable(number1, number2)
  assert_type number1, :Number, :number1
  assert_type number2, :Number, :number2
  bool(number1.comparable_to?(number2))
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="complement-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>complement</strong>($color) </h3><div class="docstring"> <div class="discussion"> <p>Returns the complement of a color. This is identical to <code>adjust-hue(color, 180deg)</code>.</p> </div> </div> <div class="tags"> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$color</code> isn't a color</p> </div> </li> </ul> <p class="tag_title">See Also:</p> <ul class="see"> <li><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#adjust_hue-instance_method" title="Sass::Script::Functions#adjust_hue (method)">#adjust-hue</a></span></li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1398
1399
1400</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1398</span>

def complement(color)
  adjust_hue color, number(180)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="content_exists-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>) <strong>content_exists</strong> </h3><div class="docstring"> <div class="discussion"> <p>Check whether a mixin was passed a content block.</p> <p>Unless <code>content-exists()</code> is called directly from a mixin, an error will be raised.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>@mixin needs-content {
  @if not content-exists() {
    @error "You must pass a content block!"
  }
  @content;
}</code></pre> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>)</span> — <div class="inline"><p>Whether a content block was passed to the mixin.</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2525
2526
2527
2528
2529
2530
2531
2532
2533</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2525</span>

def content_exists
  # frames.last is the stack frame for this function,
  # so we use frames[-2] to get the frame before that.
  mixin_frame = environment.stack.frames[-2]
  unless mixin_frame &amp;&amp; mixin_frame.type == :mixin
    raise Sass::SyntaxError.new("Cannot call content-exists() except within a mixin.")
  end
  bool(!environment.caller.content.nil?)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="counter-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>) <strong>counter</strong>($args...) </h3><div class="docstring"> <div class="discussion"> <p>This function only exists as a workaround for IE7's <a href="http://jes.st/2013/ie7s-css-breaking-content-counter-bug/" target="_parent"><code>content: counter</code> bug</a>. It works identically to any other plain-CSS function, except it avoids adding spaces between the argument commas.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>counter(item, ".") =&gt; counter(item,".")</code></pre> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2409
2410
2411</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2409</span>

def counter(*args)
  identifier("counter(#{args.map {|a| a.to_s(options)}.join(',')})")
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="counters-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>) <strong>counters</strong>($args...) </h3><div class="docstring"> <div class="discussion"> <p>This function only exists as a workaround for IE7's <a href="http://jes.st/2013/ie7s-css-breaking-content-counter-bug/" target="_parent"><code>content: counter</code> bug</a>. It works identically to any other plain-CSS function, except it avoids adding spaces between the argument commas.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>counters(item, ".") =&gt; counters(item,".")</code></pre> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2423
2424
2425</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2423</span>

def counters(*args)
  identifier("counters(#{args.map {|a| a.to_s(options)}.join(',')})")
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="darken-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>darken</strong>($color, $amount) </h3><div class="docstring"> <div class="discussion"> <p>Makes a color darker. Takes a color and a number between 0% and 100%, and returns a color with the lightness decreased by that amount.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>darken(hsl(25, 100%, 80%), 30%) =&gt; hsl(25, 100%, 50%)
darken(#800, 20%) =&gt; #200</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> <li> <span class="name">$amount</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The amount to decrease the lightness by, between <code>0%</code> and <code>100%</code></p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$amount</code> is out of bounds, or either parameter is the wrong type</p> </div> </li> </ul> <p class="tag_title">See Also:</p> <ul class="see"> <li><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#lighten-instance_method" title="Sass::Script::Functions#lighten (method)">#lighten</a></span></li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1028
1029
1030</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1028</span>

def darken(color, amount)
  _adjust(color, amount, :lightness, 0..100, :-, "%")
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="desaturate-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>desaturate</strong>($color, $amount) </h3><div class="docstring"> <div class="discussion"> <p>Makes a color less saturated. Takes a color and a number between 0% and 100%, and returns a color with the saturation decreased by that value.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>desaturate(hsl(120, 30%, 90%), 20%) =&gt; hsl(120, 10%, 90%)
desaturate(#855, 20%) =&gt; #726b6b</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> <li> <span class="name">$amount</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The amount to decrease the saturation by, between <code>0%</code> and <code>100%</code></p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$amount</code> is out of bounds, or either parameter is the wrong type</p> </div> </li> </ul> <p class="tag_title">See Also:</p> <ul class="see"> <li><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#saturate-instance_method" title="Sass::Script::Functions#saturate (method)">#saturate</a></span></li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1070
1071
1072</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1070</span>

def desaturate(color, amount)
  _adjust(color, amount, :saturation, 0..100, :-, "%")
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="feature_exists-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>) <strong>feature_exists</strong>($feature) </h3><div class="docstring"> <div class="discussion"> <p>Returns whether a feature exists in the current Sass runtime.</p> <p>The following features are supported:</p> <ul> <li><p><code>global-variable-shadowing</code> indicates that a local variable will shadow a global variable unless <code>!global</code> is used.</p></li> <li><p><code>extend-selector-pseudoclass</code> indicates that <code>@extend</code> will reach into selector pseudoclasses like <code>:not</code>.</p></li> <li><p><code>units-level-3</code> indicates full support for unit arithmetic using units defined in the <a href="http://www.w3.org/TR/css3-values/" target="_parent">Values and Units Level 3</a> spec.</p></li> <li><p><code>at-error</code> indicates that the Sass <code>@error</code> directive is supported.</p></li> <li><p><code>custom-property</code> indicates that the <a href="https://www.w3.org/TR/css-variables-1/" target="_parent">Custom Properties Level 1</a> spec is supported. This means that custom properties are parsed statically, with only interpolation treated as SassScript.</p></li> </ul> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>feature-exists(some-feature-that-exists) =&gt; true
feature-exists(what-is-this-i-dont-know) =&gt; false</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$feature</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> — <div class="inline"><p>The name of the feature</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>)</span> — <div class="inline"><p>Whether the feature is supported in this version of Sass</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$feature</code> isn't a string</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1689
1690
1691
1692</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1689</span>

def feature_exists(feature)
  assert_type feature, :String, :feature
  bool(Sass.has_feature?(feature.value))
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="floor-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>floor</strong>($number) </h3><div class="docstring"> <div class="discussion"> <p>Rounds a number down to the previous whole number.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>floor(10.4px) =&gt; 10px
floor(10.6px) =&gt; 10px</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$number</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$number</code> isn't a number</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1851
1852
1853</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1851</span>

def floor(number)
  numeric_transformation(number) {|n| n.floor}
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="function_exists-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>) <strong>function_exists</strong>($name) </h3><div class="docstring"> <div class="discussion"> <p>Check whether a function with the given name exists.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>function-exists(lighten) =&gt; true

@function myfunc { @return "something"; }
function-exists(myfunc) =&gt; true</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">name</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> — <div class="inline"><p>The name of the function to check or a function reference.</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>)</span> — <div class="inline"><p>Whether the function is defined.</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2485
2486
2487
2488
2489
2490</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2485</span>

def function_exists(name)
  assert_type name, :String, :name
  exists = Sass::Script::Functions.callable?(name.value.tr("-", "_"))
  exists ||= environment.caller.function(name.value)
  bool(exists)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="get_function-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Function.html" title="Sass::Script::Value::Function (class)">Sass::Script::Value::Function</a></span></tt>) <strong>get_function</strong>($name, $css:false) </h3><div class="docstring"> <div class="discussion"> <p>Returns a reference to a function for later invocation with the <code>call()</code> function.</p> <p>If <code>$css</code> is <code>false</code>, the function reference may refer to a function defined in your stylesheet or built-in to the host environment. If it's <code>true</code> it will refer to a plain-CSS function.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>get-function("rgb")

@function myfunc { @return "something"; }
get-function("myfunc")</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">name</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> — <div class="inline"><p>The name of the function being referenced.</p> </div> </li> <li> <span class="name">css</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>)</span> — <div class="inline"><p>Whether to get a plain CSS function.</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Function.html" title="Sass::Script::Value::Function (class)">Sass::Script::Value::Function</a></span></tt>)</span> — <div class="inline"><p>A function reference.</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1712
1713
1714
1715
1716
1717
1718
1719
1720
1721
1722
1723
1724
1725
1726
1727
1728
1729
1730
1731
1732
1733
1734
1735
1736
1737
1738
1739
1740
1741</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1712</span>

def get_function(name, kwargs = {})
  assert_type name, :String, :name

  css = if kwargs.has_key?("css")
          v = kwargs.delete("css")
          assert_type v, :Bool, :css
          v.value
        else
          false
        end

  if kwargs.any?
    raise ArgumentError.new("Illegal keyword argument '#{kwargs.keys.first}'")
  end

  if css
    return Sass::Script::Value::Function.new(
      Sass::Callable.new(name.value, nil, nil, nil, nil, nil, "function", :css))
  end

  callable = environment.caller.function(name.value) ||
    (Sass::Script::Functions.callable?(name.value.tr("-", "_")) &amp;&amp;
     Sass::Callable.new(name.value, nil, nil, nil, nil, nil, "function", :builtin))

  if callable
    Sass::Script::Value::Function.new(callable)
  else
    raise Sass::SyntaxError.new("Function not found: #{name}")
  end
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="global_variable_exists-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>) <strong>global_variable_exists</strong>($name) </h3><div class="docstring"> <div class="discussion"> <p>Check whether a variable with the given name exists in the global scope (at the top level of the file).</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>$a-false-value: false;
global-variable-exists(a-false-value) =&gt; true
global-variable-exists(a-null-value) =&gt; true

.foo {
  $some-var: false;
  @if global-variable-exists(some-var) { /* false, doesn't run */ }
}</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$name</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> — <div class="inline"><p>The name of the variable to check. The name should not include the <code>$</code>.</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>)</span> — <div class="inline"><p>Whether the variable is defined in the global scope.</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2467
2468
2469
2470</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2467</span>

def global_variable_exists(name)
  assert_type name, :String, :name
  bool(environment.global_env.var(name.value))
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="grayscale-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>grayscale</strong>($color) </h3><div class="docstring"> <div class="discussion"> <p>Converts a color to grayscale. This is identical to <code>desaturate(color, 100%)</code>.</p> </div> </div> <div class="tags"> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$color</code> isn't a color</p> </div> </li> </ul> <p class="tag_title">See Also:</p> <ul class="see"> <li><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#desaturate-instance_method" title="Sass::Script::Functions#desaturate (method)">#desaturate</a></span></li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1382
1383
1384
1385
1386
1387</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1382</span>

def grayscale(color)
  if color.is_a?(Sass::Script::Value::Number)
    return identifier("grayscale(#{color})")
  end
  desaturate color, number(100)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="green-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>green</strong>($color) </h3><div class="docstring"> <div class="discussion"> <p>Gets the green component of a color. Calculated from HSL where necessary via <a href="http://www.w3.org/TR/css3-color/#hsl-color" target="_parent">this algorithm</a>.</p> </div> </div> <div class="tags"> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The green component, between 0 and 255 inclusive</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$color</code> isn't a color</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

833
834
835
836</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 833</span>

def green(color)
  assert_type color, :Color, :color
  number(color.green)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="hsl-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>hsl</strong>($hue, $saturation, $lightness) </h3><div class="docstring"> <div class="discussion"> <p>Creates a <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Color</a></span> from hue, saturation, and lightness values. Uses the algorithm from the <a href="http://www.w3.org/TR/css3-color/#hsl-color" target="_parent">CSS3 spec</a>.</p> </div> </div> <div class="tags"> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$hue</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The hue of the color. Should be between 0 and 360 degrees, inclusive</p> </div> </li> <li> <span class="name">$saturation</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The saturation of the color. Must be between <code>0%</code> and <code>100%</code>, inclusive</p> </div> </li> <li> <span class="name">$lightness</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The lightness of the color. Must be between <code>0%</code> and <code>100%</code>, inclusive</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$saturation</code> or <code>$lightness</code> are out of bounds or any parameter is the wrong type</p> </div> </li> </ul> <p class="tag_title">See Also:</p> <ul class="see"> <li><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#hsla-instance_method" title="Sass::Script::Functions#hsla (method)">#hsla</a></span></li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

756
757
758
759
760
761
762</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 756</span>

def hsl(hue, saturation, lightness)
  if special_number?(hue) || special_number?(saturation) || special_number?(lightness)
    unquoted_string("hsl(#{hue}, #{saturation}, #{lightness})")
  else
    hsla(hue, saturation, lightness, number(1))
  end
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="hsla-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>hsla</strong>($hue, $saturation, $lightness, $alpha) </h3><div class="docstring"> <div class="discussion"> <p>Creates a <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Color</a></span> from hue, saturation, lightness, and alpha values. Uses the algorithm from the <a href="http://www.w3.org/TR/css3-color/#hsl-color" target="_parent">CSS3 spec</a>.</p> </div> </div> <div class="tags"> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$hue</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The hue of the color. Should be between 0 and 360 degrees, inclusive</p> </div> </li> <li> <span class="name">$saturation</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The saturation of the color. Must be between <code>0%</code> and <code>100%</code>, inclusive</p> </div> </li> <li> <span class="name">$lightness</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The lightness of the color. Must be between <code>0%</code> and <code>100%</code>, inclusive</p> </div> </li> <li> <span class="name">$alpha</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The opacity of the color. Must be between 0 and 1, inclusive</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$saturation</code>, <code>$lightness</code>, or <code>$alpha</code> are out of bounds or any parameter is the wrong type</p> </div> </li> </ul> <p class="tag_title">See Also:</p> <ul class="see"> <li><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#hsl-instance_method" title="Sass::Script::Functions#hsl (method)">#hsl</a></span></li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 784</span>

def hsla(hue, saturation, lightness, alpha)
  if special_number?(hue) || special_number?(saturation) ||
     special_number?(lightness) || special_number?(alpha)
    return unquoted_string("hsla(#{hue}, #{saturation}, #{lightness}, #{alpha})")
  end
  assert_type hue, :Number, :hue
  assert_type saturation, :Number, :saturation
  assert_type lightness, :Number, :lightness
  assert_type alpha, :Number, :alpha
  check_alpha_unit alpha, 'hsla'

  h = hue.value
  s = saturation.value
  l = lightness.value

  # Don't store the string representation for function-created colors, both
  # because it's not very useful and because some functions aren't supported
  # on older browsers.
  Sass::Script::Value::Color.new(
    :hue =&gt; h, :saturation =&gt; s, :lightness =&gt; l, :alpha =&gt; alpha.value)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="hue-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>hue</strong>($color) </h3><div class="docstring"> <div class="discussion"> <p>Returns the hue component of a color. See <a href="http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV" target="_parent">the CSS3 HSL specification</a>. Calculated from RGB where necessary via <a href="http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV" target="_parent">this algorithm</a>.</p> </div> </div> <div class="tags"> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The hue component, between 0deg and 360deg</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$color</code> isn't a color</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

867
868
869
870</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 867</span>

def hue(color)
  assert_type color, :Color, :color
  number(color.hue, "deg")
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="ie_hex_str-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>) <strong>ie_hex_str</strong>($color) </h3><div class="docstring"> <div class="discussion"> <p>Converts a color into the format understood by IE filters.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>ie-hex-str(#abc) =&gt; #FFAABBCC
ie-hex-str(#3322BB) =&gt; #FF3322BB
ie-hex-str(rgba(0, 255, 0, 0.5)) =&gt; #8000FF00</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> — <div class="inline"><p>The IE-formatted string representation of the color</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$color</code> isn't a color</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1107
1108
1109
1110
1111</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1107</span>

def ie_hex_str(color)
  assert_type color, :Color, :color
  alpha = Sass::Util.round(color.alpha * 255).to_s(16).rjust(2, '0')
  identifier("##{alpha}#{color.send(:hex_str)[1..-1]}".upcase)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="if-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>) <strong>if</strong>($condition, $if-true, $if-false) </h3><div class="docstring"> <div class="discussion"> <p>Returns one of two values, depending on whether or not <code>$condition</code> is true. Just like in <code>@if</code>, all values other than <code>false</code> and <code>null</code> are considered to be true.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>if(true, 1px, 2px) =&gt; 1px
if(false, 1px, 2px) =&gt; 2px</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$condition</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> — <div class="inline"><p>Whether the <code>$if-true</code> or <code>$if-false</code> will be returned</p> </div> </li> <li> <span class="name">$if-true</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Tree/Node.html" title="Sass::Script::Tree::Node (class)">Sass::Script::Tree::Node</a></span></tt>)</span> </li> <li> <span class="name">$if-false</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Tree/Node.html" title="Sass::Script::Tree::Node (class)">Sass::Script::Tree::Node</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> — <div class="inline"><p><code>$if-true</code> or <code>$if-false</code></p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2331
2332
2333
2334
2335
2336
2337</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2331</span>

def if(condition, if_true, if_false)
  if condition.to_bool
    perform(if_true)
  else
    perform(if_false)
  end
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="index-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>, <tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Null.html" title="Sass::Script::Value::Null (class)">Sass::Script::Value::Null</a></span></tt>) <strong>index</strong>($list, $value) </h3><div class="docstring"> <div class="discussion"> <p>Returns the position of a value within a list. If the value isn't found, returns <code>null</code> instead.</p> <p>Note that unlike some languages, the first item in a Sass list is number 1, the second number 2, and so forth.</p> <p>This can return the position of a pair in a map as well.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>index(1px solid red, solid) =&gt; 2
index(1px solid red, dashed) =&gt; null
index((width: 10px, height: 20px), (height 20px)) =&gt; 2</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$list</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> </li> <li> <span class="name">$value</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>, <tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Null.html" title="Sass::Script::Value::Null (class)">Sass::Script::Value::Null</a></span></tt>)</span> — <div class="inline"><p>The 1-based index of <code>$value</code> in <code>$list</code>, or <code>null</code></p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2150
2151
2152
2153</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2150</span>

def index(list, value)
  index = list.to_a.index {|e| e.eq(value).to_bool}
  index ? number(index + 1) : null
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="inspect-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>) <strong>inspect</strong>($value) </h3><div class="docstring"> <div class="discussion"> <p>Return a string containing the value as its Sass representation.</p> </div> </div> <div class="tags"> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$value</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> — <div class="inline"><p>The value to inspect.</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> — <div class="inline"><p>A representation of the value as it would be written in Sass.</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2542
2543
2544
2545</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2542</span>

def inspect(value)
  value.check_deprecated_interp if value.is_a?(Sass::Script::Value::String)
  unquoted_string(value.to_sass)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="invert-instance_method"> <span class="overload">- (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>invert</strong>($color) </span> <span class="overload">- (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>invert</strong>($color, $weight:100%) </span> </h3><div class="docstring"> <div class="discussion"> <p>Returns the inverse (negative) of a color. The red, green, and blue values are inverted, while the opacity is left alone.</p> </div> </div> <div class="tags"> <p class="tag_title">Overloads:</p> <ul class="overload"> <li class="overload_item"> <span class="signature">- (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>invert</strong>($color) </span> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> </div> </li> <li class="overload_item"> <span class="signature">- (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>invert</strong>($color, $weight:100%) </span> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> <li> <span class="name">$weight</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The relative weight of the color color's inverse</p> </div> </li> </ul> </div> </li> </ul> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$color</code> isn't a color or <code>$weight</code> isn't a percentage between 0% and 100%</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1415
1416
1417
1418
1419
1420
1421
1422
1423
1424
1425
1426
1427</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1415</span>

def invert(color, weight = number(100))
  if color.is_a?(Sass::Script::Value::Number)
    return identifier("invert(#{color})")
  end

  assert_type color, :Color, :color
  inv = color.with(
    :red =&gt; (255 - color.red),
    :green =&gt; (255 - color.green),
    :blue =&gt; (255 - color.blue))

  mix(inv, color, weight)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="is_bracketed-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>) <strong>is_bracketed</strong>($list) </h3><div class="docstring"> <div class="discussion"> <p>Returns whether a list uses square brackets.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>is-bracketed(1px 2px 3px) =&gt; false
is-bracketed([1px, 2px, 3px]) =&gt; true</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$list</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>)</span> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2179
2180
2181</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2179</span>

def is_bracketed(list)
  bool(list.bracketed)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="is_superselector-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>) <strong>is_superselector</strong>($super, $sub) </h3><div class="docstring"> <div class="discussion"> <p>Returns whether <code>$super</code> is a superselector of <code>$sub</code>. This means that <code>$super</code> matches all the elements that <code>$sub</code> matches, as well as possibly additional elements. In general, simpler selectors tend to be superselectors of more complex oned.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>is-superselector(".foo", ".foo.bar") =&gt; true
is-superselector(".foo.bar", ".foo") =&gt; false
is-superselector(".bar", ".foo .bar") =&gt; true
is-superselector(".foo .bar", ".bar") =&gt; false</code></pre> </div> <div class="docstring"> <div class="discussion"> <p>Returns Whether <code>$selector1</code> is a superselector of <code>$selector2</code>.</p> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$super</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>, <tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> — <div class="inline"><p>The potential superselector. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p> </div> </li> <li> <span class="name">$sub</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>, <tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> — <div class="inline"><p>The potential subselector. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p> </div> </li> </ul> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>)</span> — <div class="inline"><p>Whether <code>$selector1</code> is a superselector of <code>$selector2</code>.</p> </div> </li> </ul> </div> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2840
2841
2842
2843
2844</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2840</span>

def is_superselector(sup, sub)
  sup = parse_selector(sup, :super)
  sub = parse_selector(sub, :sub)
  bool(sup.superselector?(sub))
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="join-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>) <strong>join</strong>($list1, $list2, $separator:auto, $bracketed:auto) </h3><div class="docstring"> <div class="discussion"> <p>Joins together two lists into one.</p> <p>Unless <code>$separator</code> is passed, if one list is comma-separated and one is space-separated, the first parameter's separator is used for the resulting list. If both lists have fewer than two items, spaces are used for the resulting list.</p> <p>Unless <code>$bracketed</code> is passed, the resulting list is bracketed if the first parameter is.</p> <p>Like all list functions, <code>join()</code> returns a new list rather than modifying its arguments in place.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>join(10px 20px, 30px 40px) =&gt; 10px 20px 30px 40px
join((blue, red), (#abc, #def)) =&gt; blue, red, #abc, #def
join(10px, 20px) =&gt; 10px 20px
join(10px, 20px, comma) =&gt; 10px, 20px
join((blue, red), (#abc, #def), space) =&gt; blue red #abc #def
join([10px], 20px) =&gt; [10px 20px]</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$list1</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> </li> <li> <span class="name">$list2</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> </li> <li> <span class="name">$separator</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> — <div class="inline"><p>The list separator to use. If this is <code>comma</code> or <code>space</code>, that separator will be used. If this is <code>auto</code> (the default), the separator is determined as explained above.</p> </div> </li> <li> <span class="name">$bracketed</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> — <div class="inline"><p>Whether the resulting list will be bracketed. If this is <code>auto</code> (the default), the separator is determined as explained above.</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2012
2013
2014
2015
2016
2017
2018
2019
2020
2021
2022
2023
2024
2025
2026
2027
2028
2029
2030
2031
2032
2033
2034
2035
2036
2037
2038
2039
2040
2041
2042
2043
2044
2045
2046
2047
2048
2049
2050
2051
2052
2053
2054
2055
2056
2057
2058
2059
2060
2061</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2012</span>

def join(list1, list2,
         separator = identifier("auto"), bracketed = identifier("auto"),
         kwargs = nil, *rest)
  # rubocop:enable ParameterLists
  if separator.is_a?(Hash)
    kwargs = separator
    separator = identifier("auto")
  elsif bracketed.is_a?(Hash)
    kwargs = bracketed
    bracketed = identifier("auto")
  elsif rest.last.is_a?(Hash)
    rest.unshift kwargs
    kwargs = rest.pop
  end

  unless rest.empty?
    # Add 4 to rest.length because we don't want to count the kwargs hash,
    # which is always passed.
    raise ArgumentError.new("wrong number of arguments (#{rest.length + 4} for 2..4)")
  end

  if kwargs
    separator = kwargs.delete("separator") || separator
    bracketed = kwargs.delete("bracketed") || bracketed

    unless kwargs.empty?
      name, val = kwargs.to_a.first
      raise ArgumentError.new("Unknown argument $#{name} (#{val})")
    end
  end

  assert_type separator, :String, :separator
  unless %w(auto space comma).include?(separator.value)
    raise ArgumentError.new("Separator name must be space, comma, or auto")
  end

  list(list1.to_a + list2.to_a,
    separator:
      if separator.value == 'auto'
        list1.separator || list2.separator || :space
      else
        separator.value.to_sym
      end,
    bracketed:
      if bracketed.is_a?(Sass::Script::Value::String) &amp;&amp; bracketed.value == 'auto'
        list1.bracketed
      else
        bracketed.to_bool
      end)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="keywords-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Map.html" title="Sass::Script::Value::Map (class)">Sass::Script::Value::Map</a></span></tt>) <strong>keywords</strong>($args) </h3><div class="docstring"> <div class="discussion"> <p>Returns the map of named arguments passed to a function or mixin that takes a variable argument list. The argument names are strings, and they do not contain the leading <code>$</code>.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>@mixin foo($args...) {
  @debug keywords($args); //=&gt; (arg1: val, arg2: val)
}

@include foo($arg1: val, $arg2: val);</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$args</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/ArgList.html" title="Sass::Script::Value::ArgList (class)">Sass::Script::Value::ArgList</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Map.html" title="Sass::Script::Value::Map (class)">Sass::Script::Value::Map</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$args</code> isn't a variable argument list</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2312
2313
2314
2315</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2312</span>

def keywords(args)
  assert_type args, :ArgList, :args
  map(Sass::Util.map_keys(args.keywords.as_stored) {|k| Sass::Script::Value::String.new(k)})
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="length-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>length</strong>($list) </h3><div class="docstring"> <div class="discussion"> <p>Return the length of a list.</p> <p>This can return the number of pairs in a map as well.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>length(10px) =&gt; 1
length(10px 20px 30px) =&gt; 3
length((width: 10px, height: 20px)) =&gt; 2</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$list</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1915
1916
1917</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1915</span>

def length(list)
  number(list.to_a.size)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="lighten-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>lighten</strong>($color, $amount) </h3><div class="docstring"> <div class="discussion"> <p>Makes a color lighter. Takes a color and a number between <code>0%</code> and <code>100%</code>, and returns a color with the lightness increased by that amount.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>lighten(hsl(0, 0%, 0%), 30%) =&gt; hsl(0, 0, 30)
lighten(#800, 20%) =&gt; #e00</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> <li> <span class="name">$amount</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The amount to increase the lightness by, between <code>0%</code> and <code>100%</code></p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$amount</code> is out of bounds, or either parameter is the wrong type</p> </div> </li> </ul> <p class="tag_title">See Also:</p> <ul class="see"> <li><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#darken-instance_method" title="Sass::Script::Functions#darken (method)">#darken</a></span></li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1009
1010
1011</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1009</span>

def lighten(color, amount)
  _adjust(color, amount, :lightness, 0..100, :+, "%")
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="lightness-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>lightness</strong>($color) </h3><div class="docstring"> <div class="discussion"> <p>Returns the lightness component of a color. See <a href="http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV" target="_parent">the CSS3 HSL specification</a>. Calculated from RGB where necessary via <a href="http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV" target="_parent">this algorithm</a>.</p> </div> </div> <div class="tags"> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The lightness component, between 0% and 100%</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$color</code> isn't a color</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

903
904
905
906</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 903</span>

def lightness(color)
  assert_type color, :Color, :color
  number(color.lightness, "%")
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="list_separator-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>) <strong>list_separator</strong>($list) </h3><div class="docstring"> <div class="discussion"> <p>Returns the separator of a list. If the list doesn't have a separator due to having fewer than two elements, returns <code>space</code>.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>list-separator(1px 2px 3px) =&gt; space
list-separator(1px, 2px, 3px) =&gt; comma
list-separator('foo') =&gt; space</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$list</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> — <div class="inline"><p><code>comma</code> or <code>space</code></p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2166
2167
2168</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2166</span>

def list_separator(list)
  identifier((list.separator || :space).to_s)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="map_get-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>) <strong>map_get</strong>($map, $key) </h3><div class="docstring"> <div class="discussion"> <p>Returns the value in a map associated with the given key. If the map doesn't have such a key, returns <code>null</code>.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>map-get(("foo": 1, "bar": 2), "foo") =&gt; 1
map-get(("foo": 1, "bar": 2), "bar") =&gt; 2
map-get(("foo": 1, "bar": 2), "baz") =&gt; null</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$map</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Map.html" title="Sass::Script::Value::Map (class)">Sass::Script::Value::Map</a></span></tt>)</span> </li> <li> <span class="name">$key</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> — <div class="inline"><p>The value indexed by <code>$key</code>, or <code>null</code> if the map doesn't contain the given key</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$map</code> is not a map</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2197
2198
2199
2200</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2197</span>

def map_get(map, key)
  assert_type map, :Map, :map
  map.to_h[key] || null
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="map_has_key-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>) <strong>map_has_key</strong>($map, $key) </h3><div class="docstring"> <div class="discussion"> <p>Returns whether a map has a value associated with a given key.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>map-has-key(("foo": 1, "bar": 2), "foo") =&gt; true
map-has-key(("foo": 1, "bar": 2), "baz") =&gt; false</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$map</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Map.html" title="Sass::Script::Value::Map (class)">Sass::Script::Value::Map</a></span></tt>)</span> </li> <li> <span class="name">$key</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$map</code> is not a map</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2292
2293
2294
2295</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2292</span>

def map_has_key(map, key)
  assert_type map, :Map, :map
  bool(map.to_h.has_key?(key))
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="map_keys-instance_method"> - (<tt>List</tt>) <strong>map_keys</strong>($map) </h3><div class="docstring"> <div class="discussion"> <p>Returns a list of all keys in a map.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>map-keys(("foo": 1, "bar": 2)) =&gt; "foo", "bar"</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$map</span> <span class="type">(<tt>Map</tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt>List</tt>)</span> — <div class="inline"><p>the list of keys, comma-separated</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$map</code> is not a map</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2260
2261
2262
2263</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2260</span>

def map_keys(map)
  assert_type map, :Map, :map
  list(map.to_h.keys, :comma)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="map_merge-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Map.html" title="Sass::Script::Value::Map (class)">Sass::Script::Value::Map</a></span></tt>) <strong>map_merge</strong>($map1, $map2) </h3><div class="docstring"> <div class="discussion"> <p>Merges two maps together into a new map. Keys in <code>$map2</code> will take precedence over keys in <code>$map1</code>.</p> <p>This is the best way to add new values to a map.</p> <p>All keys in the returned map that also appear in <code>$map1</code> will have the same order as in <code>$map1</code>. New keys from <code>$map2</code> will be placed at the end of the map.</p> <p>Like all map functions, <code>map-merge()</code> returns a new map rather than modifying its arguments in place.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>map-merge(("foo": 1), ("bar": 2)) =&gt; ("foo": 1, "bar": 2)
map-merge(("foo": 1, "bar": 2), ("bar": 3)) =&gt; ("foo": 1, "bar": 3)</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$map1</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Map.html" title="Sass::Script::Value::Map (class)">Sass::Script::Value::Map</a></span></tt>)</span> </li> <li> <span class="name">$map2</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Map.html" title="Sass::Script::Value::Map (class)">Sass::Script::Value::Map</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Map.html" title="Sass::Script::Value::Map (class)">Sass::Script::Value::Map</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if either parameter is not a map</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2223
2224
2225
2226
2227</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2223</span>

def map_merge(map1, map2)
  assert_type map1, :Map, :map1
  assert_type map2, :Map, :map2
  map(map1.to_h.merge(map2.to_h))
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="map_remove-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Map.html" title="Sass::Script::Value::Map (class)">Sass::Script::Value::Map</a></span></tt>) <strong>map_remove</strong>($map, $keys...) </h3><div class="docstring"> <div class="discussion"> <p>Returns a new map with keys removed.</p> <p>Like all map functions, <code>map-merge()</code> returns a new map rather than modifying its arguments in place.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>map-remove(("foo": 1, "bar": 2), "bar") =&gt; ("foo": 1)
map-remove(("foo": 1, "bar": 2, "baz": 3), "bar", "baz") =&gt; ("foo": 1)
map-remove(("foo": 1, "bar": 2), "baz") =&gt; ("foo": 1, "bar": 2)</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$map</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Map.html" title="Sass::Script::Value::Map (class)">Sass::Script::Value::Map</a></span></tt>)</span> </li> <li> <span class="name">$keys</span> <span class="type">(<tt>[<span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span>]</tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Map.html" title="Sass::Script::Value::Map (class)">Sass::Script::Value::Map</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$map</code> is not a map</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2244
2245
2246
2247
2248
2249</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2244</span>

def map_remove(map, *keys)
  assert_type map, :Map, :map
  hash = map.to_h.dup
  hash.delete_if {|key, _| keys.include?(key)}
  map(hash)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="map_values-instance_method"> - (<tt>List</tt>) <strong>map_values</strong>($map) </h3><div class="docstring"> <div class="discussion"> <p>Returns a list of all values in a map. This list may include duplicate values, if multiple keys have the same value.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>map-values(("foo": 1, "bar": 2)) =&gt; 1, 2
map-values(("foo": 1, "bar": 2, "baz": 1)) =&gt; 1, 2, 1</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$map</span> <span class="type">(<tt>Map</tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt>List</tt>)</span> — <div class="inline"><p>the list of values, comma-separated</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$map</code> is not a map</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2276
2277
2278
2279</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2276</span>

def map_values(map)
  assert_type map, :Map, :map
  list(map.to_h.values, :comma)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="max-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>max</strong>($numbers...) </h3><div class="docstring"> <div class="discussion"> <p>Finds the maximum of several numbers. This function takes any number of arguments.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>max(1px, 4px) =&gt; 4px
max(5em, 3em, 4em) =&gt; 5em</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$numbers</span> <span class="type">(<tt>[<span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span>]</tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if any argument isn't a number, or if not all of the arguments have comparable units</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1898
1899
1900
1901</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1898</span>

def max(*values)
  values.each {|v| assert_type v, :Number}
  values.inject {|max, val| max.gt(val).to_bool ? max : val}
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="min-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>min</strong>($numbers...) </h3><div class="docstring"> <div class="discussion"> <p>Finds the minimum of several numbers. This function takes any number of arguments.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>min(1px, 4px) =&gt; 1px
min(5em, 3em, 4em) =&gt; 3em</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$numbers</span> <span class="type">(<tt>[<span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span>]</tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if any argument isn't a number, or if not all of the arguments have comparable units</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1881
1882
1883
1884</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1881</span>

def min(*numbers)
  numbers.each {|n| assert_type n, :Number}
  numbers.inject {|min, num| min.lt(num).to_bool ? min : num}
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="mix-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>mix</strong>($color1, $color2, $weight:50%) </h3><div class="docstring"> <div class="discussion"> <p>Mixes two colors together. Specifically, takes the average of each of the RGB components, optionally weighted by the given percentage. The opacity of the colors is also considered when weighting the components.</p> <p>The weight specifies the amount of the first color that should be included in the returned color. The default, <code>50%</code>, means that half the first color and half the second color should be used. <code>25%</code> means that a quarter of the first color and three quarters of the second color should be used.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>mix(#f00, #00f) =&gt; #7f007f
mix(#f00, #00f, 25%) =&gt; #3f00bf
mix(rgba(255, 0, 0, 0.5), #00f) =&gt; rgba(63, 0, 191, 0.75)</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color1</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> <li> <span class="name">$color2</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> <li> <span class="name">$weight</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The relative weight of each color. Closer to <code>100%</code> gives more weight to <code>$color1</code>, closer to <code>0%</code> gives more weight to <code>$color2</code></p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$weight</code> is out of bounds or any parameter is the wrong type</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1334
1335
1336
1337
1338
1339
1340
1341
1342
1343
1344
1345
1346
1347
1348
1349
1350
1351
1352
1353
1354
1355
1356
1357
1358
1359
1360
1361
1362
1363
1364
1365
1366
1367
1368
1369
1370</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1334</span>

def mix(color1, color2, weight = number(50))
  assert_type color1, :Color, :color1
  assert_type color2, :Color, :color2
  assert_type weight, :Number, :weight

  Sass::Util.check_range("Weight", 0..100, weight, '%')

  # This algorithm factors in both the user-provided weight (w) and the
  # difference between the alpha values of the two colors (a) to decide how
  # to perform the weighted average of the two RGB values.
  #
  # It works by first normalizing both parameters to be within [-1, 1],
  # where 1 indicates "only use color1", -1 indicates "only use color2", and
  # all values in between indicated a proportionately weighted average.
  #
  # Once we have the normalized variables w and a, we apply the formula
  # (w + a)/(1 + w*a) to get the combined weight (in [-1, 1]) of color1.
  # This formula has two especially nice properties:
  #
  #   * When either w or a are -1 or 1, the combined weight is also that number
  #     (cases where w * a == -1 are undefined, and handled as a special case).
  #
  #   * When a is 0, the combined weight is w, and vice versa.
  #
  # Finally, the weight of color1 is renormalized to be within [0, 1]
  # and the weight of color2 is given by 1 minus the weight of color1.
  p = (weight.value / 100.0).to_f
  w = p * 2 - 1
  a = color1.alpha - color2.alpha

  w1 = ((w * a == -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0
  w2 = 1 - w1

  rgba = color1.rgb.zip(color2.rgb).map {|v1, v2| v1 * w1 + v2 * w2}
  rgba &lt;&lt; color1.alpha * p + color2.alpha * (1 - p)
  rgb_color(*rgba)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="mixin_exists-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>) <strong>mixin_exists</strong>($name) </h3><div class="docstring"> <div class="discussion"> <p>Check whether a mixin with the given name exists.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>mixin-exists(nonexistent) =&gt; false

@mixin red-text { color: red; }
mixin-exists(red-text) =&gt; true</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">name</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> — <div class="inline"><p>The name of the mixin to check.</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>)</span> — <div class="inline"><p>Whether the mixin is defined.</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2505
2506
2507
2508</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2505</span>

def mixin_exists(name)
  assert_type name, :String, :name
  bool(environment.mixin(name.value))
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="nth-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>) <strong>nth</strong>($list, $n) </h3><div class="docstring"> <div class="discussion"> <p>Gets the nth item in a list.</p> <p>Note that unlike some languages, the first item in a Sass list is number 1, the second number 2, and so forth.</p> <p>This can return the nth pair in a map as well.</p> <p>Negative index values address elements in reverse order, starting with the last element in the list.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>nth(10px 20px 30px, 1) =&gt; 10px
nth((Helvetica, Arial, sans-serif), 3) =&gt; sans-serif
nth((width: 10px, length: 20px), 2) =&gt; length, 20px</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$list</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> </li> <li> <span class="name">$n</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The index of the item to get. Negative indices count from the end of the list.</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$n</code> isn't an integer between 1 and the length of <code>$list</code></p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1971
1972
1973
1974
1975
1976
1977</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1971</span>

def nth(list, n)
  assert_type n, :Number, :n
  Sass::Script::Value::List.assert_valid_index(list, n)

  index = n.to_i &gt; 0 ? n.to_i - 1 : n.to_i
  list.to_a[index]
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="opacify-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>opacify</strong>($color, $amount) <span class="aliases">Also known as: <span class="names"><span id="fade_in-instance_method">fade_in</span></span> </span> </h3><div class="docstring"> <div class="discussion"> <p>Makes a color more opaque. Takes a color and a number between 0 and 1, and returns a color with the opacity increased by that amount.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>opacify(rgba(0, 0, 0, 0.5), 0.1) =&gt; rgba(0, 0, 0, 0.6)
opacify(rgba(0, 0, 17, 0.8), 0.2) =&gt; #001</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> <li> <span class="name">$amount</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The amount to increase the opacity by, between 0 and 1</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$amount</code> is out of bounds, or either parameter is the wrong type</p> </div> </li> </ul> <p class="tag_title">See Also:</p> <ul class="see"> <li><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#transparentize-instance_method" title="Sass::Script::Functions#transparentize (method)">#transparentize</a></span></li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

965
966
967</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 965</span>

def opacify(color, amount)
  _adjust(color, amount, :alpha, 0..1, :+)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="opacity-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>opacity</strong>($color) </h3><div class="docstring"> <div class="discussion"> <p>Returns the alpha component (opacity) of a color. This is 1 unless otherwise specified.</p> </div> </div> <div class="tags"> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The alpha component, between 0 and 1</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$color</code> isn't a color</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

942
943
944
945
946
947
948</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 942</span>

def opacity(color)
  if color.is_a?(Sass::Script::Value::Number)
    return identifier("opacity(#{color})")
  end
  assert_type color, :Color, :color
  number(color.alpha)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="percentage-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>percentage</strong>($number) </h3><div class="docstring"> <div class="discussion"> <p>Converts a unitless number to a percentage.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>percentage(0.2) =&gt; 20%
percentage(100px / 50px) =&gt; 200%</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$number</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$number</code> isn't a unitless number</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1806
1807
1808
1809
1810
1811</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1806</span>

def percentage(number)
  unless number.is_a?(Sass::Script::Value::Number) &amp;&amp; number.unitless?
    raise ArgumentError.new("$number: #{number.inspect} is not a unitless number")
  end
  number(number.value * 100, '%')
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="quote-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>) <strong>quote</strong>($string) </h3><div class="docstring"> <div class="discussion"> <p>Add quotes to a string if the string isn't quoted, or returns the same string if it is.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>quote("foo") =&gt; "foo"
quote(foo) =&gt; "foo"</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$string</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$string</code> isn't a string</p> </div> </li> </ul> <p class="tag_title">See Also:</p> <ul class="see"> <li><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#unquote-instance_method" title="Sass::Script::Functions#unquote (method)">#unquote</a></span></li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1478
1479
1480
1481
1482
1483
1484
1485</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1478</span>

def quote(string)
  assert_type string, :String, :string
  if string.type != :string
    quoted_string(string.value)
  else
    string
  end
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="random-instance_method"> <span class="overload">- (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>random</strong> </span> <span class="overload">- (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>random</strong>($limit) </span> </h3><div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Overloads:</p> <ul class="overload"> <li class="overload_item"> <span class="signature">- (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>random</strong> </span> <div class="docstring"> <div class="discussion"> <p>Return a decimal between 0 and 1, inclusive of 0 but not 1.</p> </div> </div> <div class="tags"> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>A decimal value.</p> </div> </li> </ul> </div> </li> <li class="overload_item"> <span class="signature">- (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>random</strong>($limit) </span> <div class="docstring"> <div class="discussion"> <p>Return an integer between 1 and <code>$limit</code>, inclusive of both 1 and <code>$limit</code>.</p> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$limit</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The maximum of the random integer to be returned, a positive integer.</p> </div> </li> </ul> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>An integer.</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if the <code>$limit</code> is not 1 or greater</p> </div> </li> </ul> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2557
2558
2559
2560
2561
2562
2563
2564
2565
2566
2567
2568</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2557</span>

def random(limit = nil)
  generator = Sass::Script::Functions.random_number_generator
  if limit
    assert_integer limit, "limit"
    if limit.to_i &lt; 1
      raise ArgumentError.new("$limit #{limit} must be greater than or equal to 1")
    end
    number(1 + generator.rand(limit.to_i))
  else
    number(generator.rand)
  end
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="red-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>red</strong>($color) </h3><div class="docstring"> <div class="discussion"> <p>Gets the red component of a color. Calculated from HSL where necessary via <a href="http://www.w3.org/TR/css3-color/#hsl-color" target="_parent">this algorithm</a>.</p> </div> </div> <div class="tags"> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The red component, between 0 and 255 inclusive</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$color</code> isn't a color</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

817
818
819
820</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 817</span>

def red(color)
  assert_type color, :Color, :color
  number(color.red)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="rgb-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>rgb</strong>($red, $green, $blue) </h3><div class="docstring"> <div class="discussion"> <p>Creates a <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Color</a></span> object from red, green, and blue values.</p> </div> </div> <div class="tags"> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$red</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The amount of red in the color. Must be between 0 and 255 inclusive, or between <code>0%</code> and <code>100%</code> inclusive</p> </div> </li> <li> <span class="name">$green</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The amount of green in the color. Must be between 0 and 255 inclusive, or between <code>0%</code> and <code>100%</code> inclusive</p> </div> </li> <li> <span class="name">$blue</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The amount of blue in the color. Must be between 0 and 255 inclusive, or between <code>0%</code> and <code>100%</code> inclusive</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if any parameter is the wrong type or out of bounds</p> </div> </li> </ul> <p class="tag_title">See Also:</p> <ul class="see"> <li><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#rgba-instance_method" title="Sass::Script::Functions#rgba (method)">#rgba</a></span></li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 656</span>

def rgb(red, green, blue)
  if special_number?(red) || special_number?(green) || special_number?(blue)
    return unquoted_string("rgb(#{red}, #{green}, #{blue})")
  end
  assert_type red, :Number, :red
  assert_type green, :Number, :green
  assert_type blue, :Number, :blue

  color_attrs = [red, green, blue].map do |c|
    if c.is_unit?("%")
      c.value * 255 / 100.0
    elsif c.unitless?
      c.value
    else
      raise ArgumentError.new("Expected #{c} to be unitless or have a unit of % but got #{c}")
    end
  end

  # Don't store the string representation for function-created colors, both
  # because it's not very useful and because some functions aren't supported
  # on older browsers.
  Sass::Script::Value::Color.new(color_attrs)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="rgba-instance_method"> <span class="overload">- (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>rgba</strong>($red, $green, $blue, $alpha) </span> <span class="overload">- (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>rgba</strong>($color, $alpha) </span> </h3><div class="docstring"> <div class="discussion"> <p>Creates a <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Color</a></span> from red, green, blue, and alpha values.</p> </div> </div> <div class="tags"> <p class="tag_title">Overloads:</p> <ul class="overload"> <li class="overload_item"> <span class="signature">- (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>rgba</strong>($red, $green, $blue, $alpha) </span> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$red</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The amount of red in the color. Must be between 0 and 255 inclusive or 0% and 100% inclusive</p> </div> </li> <li> <span class="name">$green</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The amount of green in the color. Must be between 0 and 255 inclusive or 0% and 100% inclusive</p> </div> </li> <li> <span class="name">$blue</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The amount of blue in the color. Must be between 0 and 255 inclusive or 0% and 100% inclusive</p> </div> </li> <li> <span class="name">$alpha</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The opacity of the color. Must be between 0 and 1 inclusive</p> </div> </li> </ul> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if any parameter is the wrong type or out of bounds</p> </div> </li> </ul> </div> </li> <li class="overload_item"> <span class="signature">- (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>rgba</strong>($color, $alpha) </span> <div class="docstring"> <div class="discussion"> <p>Sets the opacity of an existing color.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>rgba(#102030, 0.5) =&gt; rgba(16, 32, 48, 0.5)
rgba(blue, 0.2)    =&gt; rgba(0, 0, 255, 0.2)</code></pre> </div> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> — <div class="inline"><p>The color whose opacity will be changed.</p> </div> </li> <li> <span class="name">$alpha</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The new opacity of the color. Must be between 0 and 1 inclusive</p> </div> </li> </ul> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$alpha</code> is out of bounds or either parameter is the wrong type</p> </div> </li> </ul> </div> </li> </ul> <p class="tag_title">See Also:</p> <ul class="see"> <li><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#rgb-instance_method" title="Sass::Script::Functions#rgb (method)">#rgb</a></span></li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 712</span>

def rgba(*args)
  case args.size
  when 2
    color, alpha = args

    assert_type color, :Color, :color
    if special_number?(alpha)
      unquoted_string("rgba(#{color.red}, #{color.green}, #{color.blue}, #{alpha})")
    else
      assert_type alpha, :Number, :alpha
      check_alpha_unit alpha, 'rgba'
      color.with(:alpha =&gt; alpha.value)
    end
  when 4
    red, green, blue, alpha = args
    if special_number?(red) || special_number?(green) ||
       special_number?(blue) || special_number?(alpha)
      unquoted_string("rgba(#{red}, #{green}, #{blue}, #{alpha})")
    else
      rgba(rgb(red, green, blue), alpha)
    end
  else
    raise ArgumentError.new("wrong number of arguments (#{args.size} for 4)")
  end
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="round-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>round</strong>($number) </h3><div class="docstring"> <div class="discussion"> <p>Rounds a number to the nearest whole number.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>round(10.4px) =&gt; 10px
round(10.6px) =&gt; 11px</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$number</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$number</code> isn't a number</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1823
1824
1825</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1823</span>

def round(number)
  numeric_transformation(number) {|n| Sass::Util.round(n)}
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="saturate-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>saturate</strong>($color, $amount) </h3><div class="docstring"> <div class="discussion"> <p>Makes a color more saturated. Takes a color and a number between 0% and 100%, and returns a color with the saturation increased by that amount.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>saturate(hsl(120, 30%, 90%), 20%) =&gt; hsl(120, 50%, 90%)
saturate(#855, 20%) =&gt; #9e3f3f</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> <li> <span class="name">$amount</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The amount to increase the saturation by, between <code>0%</code> and <code>100%</code></p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$amount</code> is out of bounds, or either parameter is the wrong type</p> </div> </li> </ul> <p class="tag_title">See Also:</p> <ul class="see"> <li><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#desaturate-instance_method" title="Sass::Script::Functions#desaturate (method)">#desaturate</a></span></li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1047
1048
1049
1050
1051
1052</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1047</span>

def saturate(color, amount = nil)
  # Support the filter effects definition of saturate.
  # https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html
  return identifier("saturate(#{color})") if amount.nil?
  _adjust(color, amount, :saturation, 0..100, :+, "%")
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="saturation-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>saturation</strong>($color) </h3><div class="docstring"> <div class="discussion"> <p>Returns the saturation component of a color. See <a href="http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV" target="_parent">the CSS3 HSL specification</a>. Calculated from RGB where necessary via <a href="http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV" target="_parent">this algorithm</a>.</p> </div> </div> <div class="tags"> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The saturation component, between 0% and 100%</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$color</code> isn't a color</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

885
886
887
888</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 885</span>

def saturation(color)
  assert_type color, :Color, :color
  number(color.saturation, "%")
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="scale_color-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>scale_color</strong>($color, [$red], [$green], [$blue], [$saturation], [$lightness], [$alpha]) </h3><div class="docstring"> <div class="discussion"> <p>Fluidly scales one or more properties of a color. Unlike <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#adjust_color-instance_method" title="Sass::Script::Functions#adjust_color (method)">adjust-color</a></span>, which changes a color's properties by fixed amounts, <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#scale_color-instance_method" title="Sass::Script::Functions#scale_color (method)">scale-color</a></span> fluidly changes them based on how high or low they already are. That means that lightening an already-light color with <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#scale_color-instance_method" title="Sass::Script::Functions#scale_color (method)">scale-color</a></span> won't change the lightness much, but lightening a dark color by the same amount will change it more dramatically. This has the benefit of making <code>scale-color($color, ...)</code> have a similar effect regardless of what <code>$color</code> is.</p> <p>For example, the lightness of a color can be anywhere between <code>0%</code> and <code>100%</code>. If <code>scale-color($color, $lightness: 40%)</code> is called, the resulting color's lightness will be 40% of the way between its original lightness and 100. If <code>scale-color($color, $lightness: -40%)</code> is called instead, the lightness will be 40% of the way between the original and 0.</p> <p>This can change the red, green, blue, saturation, value, and alpha properties. The properties are specified as keyword arguments. All arguments should be percentages between <code>0%</code> and <code>100%</code>.</p> <p>All properties are optional. You can't specify both RGB properties (<code>$red</code>, <code>$green</code>, <code>$blue</code>) and HSL properties (<code>$saturation</code>, <code>$value</code>) at the same time.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>scale-color(hsl(120, 70%, 80%), $lightness: 50%) =&gt; hsl(120, 70%, 90%)
scale-color(rgb(200, 150%, 170%), $green: -40%, $blue: 70%) =&gt; rgb(200, 90, 229)
scale-color(hsl(200, 70%, 80%), $saturation: -90%, $alpha: -30%) =&gt; hsla(200, 7%, 80%, 0.7)</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> <li> <span class="name">$red</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> <li> <span class="name">$green</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> <li> <span class="name">$blue</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> <li> <span class="name">$saturation</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> <li> <span class="name">$lightness</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> <li> <span class="name">$alpha</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if any parameter is the wrong type or out-of bounds, or if RGB properties and HSL properties are adjusted at the same time</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1215</span>

def scale_color(color, kwargs)
  assert_type color, :Color, :color
  with = Sass::Util.map_hash(
    "red" =&gt; 255,
    "green" =&gt; 255,
    "blue" =&gt; 255,
    "saturation" =&gt; 100,
    "lightness" =&gt; 100,
    "alpha" =&gt; 1
  ) do |name, max|
    val = kwargs.delete(name)
    next unless val
    assert_type val, :Number, name
    assert_unit val, '%', name
    Sass::Util.check_range("$#{name}: Amount", -100..100, val, '%')

    current = color.send(name)
    scale = val.value / 100.0
    diff = scale &gt; 0 ? max - current : current
    [name.to_sym, current + diff * scale]
  end

  unless kwargs.empty?
    name, val = kwargs.to_a.first
    raise ArgumentError.new("Unknown argument $#{name} (#{val})")
  end

  color.with(with)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="selector_append-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>) <strong>selector_append</strong>($selectors...) </h3><div class="docstring"> <div class="discussion"> <p>Return a new selector with all selectors in <code>$selectors</code> appended one another as though they had been nested in the stylesheet as <code>$selector1 { &amp;$selector2 { ... } }</code>.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>selector-append(".foo", ".bar", ".baz") =&gt; .foo.bar.baz
selector-append(".a .foo", ".b .bar") =&gt; "a .foo.b .bar"
selector-append(".foo", "-suffix") =&gt; ".foo-suffix"</code></pre> </div> <div class="docstring"> <div class="discussion"> <p>Returns A list of lists of strings representing the result of appending <code>$selectors</code>. This is in the same format as a selector returned by <code>&amp;</code>.</p> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$selectors</span> <span class="type">(<tt>[<span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span>, <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span>]</tt>)</span> — <div class="inline"><p>The selectors to append. At least one selector must be passed. Each of these can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p> </div> </li> </ul> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> — <div class="inline"><p>A list of lists of strings representing the result of appending <code>$selectors</code>. This is in the same format as a selector returned by <code>&amp;</code>.</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if a selector could not be appended.</p> </div> </li> </ul> </div> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2641
2642
2643
2644
2645
2646
2647
2648
2649
2650
2651
2652
2653
2654
2655
2656
2657
2658
2659
2660
2661
2662
2663
2664
2665
2666
2667
2668</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2641</span>

def selector_append(*selectors)
  if selectors.empty?
    raise ArgumentError.new("$selectors: At least one selector must be passed")
  end

  selectors.map {|sel| parse_selector(sel, :selectors)}.inject do |parent, child|
    child.members.each do |seq|
      sseq = seq.members.first
      unless sseq.is_a?(Sass::Selector::SimpleSequence)
        raise ArgumentError.new("Can't append \"#{seq}\" to \"#{parent}\"")
      end

      base = sseq.base
      case base
      when Sass::Selector::Universal
        raise ArgumentError.new("Can't append \"#{seq}\" to \"#{parent}\"")
      when Sass::Selector::Element
        unless base.namespace.nil?
          raise ArgumentError.new("Can't append \"#{seq}\" to \"#{parent}\"")
        end
        sseq.members[0] = Sass::Selector::Parent.new(base.name)
      else
        sseq.members.unshift Sass::Selector::Parent.new
      end
    end
    child.resolve_parent_refs(parent)
  end.to_sass_script
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="selector_extend-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>) <strong>selector_extend</strong>($selector, $extendee, $extender) </h3><div class="docstring"> <div class="discussion"> <p>Returns a new version of <code>$selector</code> with <code>$extendee</code> extended with <code>$extender</code>. This works just like the result of</p> <pre class="code ruby"><code class="ruby">$selector { ... }
$extender { @extend $extendee }
</code></pre> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>selector-extend(".a .b", ".b", ".foo .bar") =&gt; .a .b, .a .foo .bar, .foo .a .bar</code></pre> </div> <div class="docstring"> <div class="discussion"> <p>Returns A list of lists of strings representing the result of the extension. This is in the same format as a selector returned by <code>&amp;</code>.</p> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$selector</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>, <tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> — <div class="inline"><p>The selector within which <code>$extendee</code> is extended with <code>$extender</code>. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p> </div> </li> <li> <span class="name">$extendee</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>, <tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> — <div class="inline"><p>The selector being extended. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p> </div> </li> <li> <span class="name">$extender</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>, <tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> — <div class="inline"><p>The selector being injected into <code>$selector</code>. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p> </div> </li> </ul> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> — <div class="inline"><p>A list of lists of strings representing the result of the extension. This is in the same format as a selector returned by <code>&amp;</code>.</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if the extension fails</p> </div> </li> </ul> </div> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2698
2699
2700
2701
2702
2703
2704
2705
2706
2707
2708
2709
2710</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2698</span>

def selector_extend(selector, extendee, extender)
  selector = parse_selector(selector, :selector)
  extendee = parse_selector(extendee, :extendee)
  extender = parse_selector(extender, :extender)

  extends = Sass::Util::SubsetMap.new
  begin
    extender.populate_extends(extends, extendee, nil, [], true)
    selector.do_extend(extends).to_sass_script
  rescue Sass::SyntaxError =&gt; e
    raise ArgumentError.new(e.to_s)
  end
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="selector_nest-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>) <strong>selector_nest</strong>($selectors...) </h3><div class="docstring"> <div class="discussion"> <p>Return a new selector with all selectors in <code>$selectors</code> nested beneath one another as though they had been nested in the stylesheet as <code>$selector1 { $selector2 { ... } }</code>.</p> <p>Unlike most selector functions, <code>selector-nest</code> allows the parent selector <code>&amp;</code> to be used in any selector but the first.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>selector-nest(".foo", ".bar", ".baz") =&gt; .foo .bar .baz
selector-nest(".a .foo", ".b .bar") =&gt; .a .foo .b .bar
selector-nest(".foo", "&amp;.bar") =&gt; .foo.bar</code></pre> </div> <div class="docstring"> <div class="discussion"> <p>Returns A list of lists of strings representing the result of nesting <code>$selectors</code>. This is in the same format as a selector returned by <code>&amp;</code>.</p> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$selectors</span> <span class="type">(<tt>[<span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span>, <span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span>]</tt>)</span> — <div class="inline"><p>The selectors to nest. At least one selector must be passed. Each of these can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p> </div> </li> </ul> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> — <div class="inline"><p>A list of lists of strings representing the result of nesting <code>$selectors</code>. This is in the same format as a selector returned by <code>&amp;</code>.</p> </div> </li> </ul> </div> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2611
2612
2613
2614
2615
2616
2617
2618
2619</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2611</span>

def selector_nest(*selectors)
  if selectors.empty?
    raise ArgumentError.new("$selectors: At least one selector must be passed")
  end

  parsed = [parse_selector(selectors.first, :selectors)]
  parsed += selectors[1..-1].map {|sel| parse_selector(sel, :selectors, true)}
  parsed.inject {|result, child| child.resolve_parent_refs(result)}.to_sass_script
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="selector_parse-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>) <strong>selector_parse</strong>($selector) </h3><div class="docstring"> <div class="discussion"> <p>Parses a user-provided selector into a list of lists of strings as returned by <code>&amp;</code>.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>selector-parse(".foo .bar, .baz .bang") =&gt; ('.foo' '.bar', '.baz' '.bang')</code></pre> </div> <div class="docstring"> <div class="discussion"> <p>Returns A list of lists of strings representing <code>$selector</code>. This is in the same format as a selector returned by <code>&amp;</code>.</p> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$selector</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>, <tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> — <div class="inline"><p>The selector to parse. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p> </div> </li> </ul> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> — <div class="inline"><p>A list of lists of strings representing <code>$selector</code>. This is in the same format as a selector returned by <code>&amp;</code>.</p> </div> </li> </ul> </div> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2585
2586
2587</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2585</span>

def selector_parse(selector)
  parse_selector(selector, :selector).to_sass_script
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="selector_replace-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>) <strong>selector_replace</strong>($selector, $original, $replacement) </h3><div class="docstring"> <div class="discussion"> <p>Replaces all instances of <code>$original</code> with <code>$replacement</code> in <code>$selector</code></p> <p>This works by using <code>@extend</code> and throwing away the original selector. This means that it can be used to do very advanced replacements; see the examples below.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>selector-replace(".foo .bar", ".bar", ".baz") =&gt; ".foo .baz"
selector-replace(".foo.bar.baz", ".foo.baz", ".qux") =&gt; ".bar.qux"</code></pre> </div> <div class="docstring"> <div class="discussion"> <p>Returns A list of lists of strings representing the result of the extension. This is in the same format as a selector returned by <code>&amp;</code>.</p> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$selector</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>, <tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> — <div class="inline"><p>The selector within which <code>$original</code> is replaced with <code>$replacement</code>. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p> </div> </li> <li> <span class="name">$original</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>, <tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> — <div class="inline"><p>The selector being replaced. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p> </div> </li> <li> <span class="name">$replacement</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>, <tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> — <div class="inline"><p>The selector that <code>$original</code> is being replaced with. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p> </div> </li> </ul> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> — <div class="inline"><p>A list of lists of strings representing the result of the extension. This is in the same format as a selector returned by <code>&amp;</code>.</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if the replacement fails</p> </div> </li> </ul> </div> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2741
2742
2743
2744
2745
2746
2747
2748
2749
2750
2751
2752
2753</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2741</span>

def selector_replace(selector, original, replacement)
  selector = parse_selector(selector, :selector)
  original = parse_selector(original, :original)
  replacement = parse_selector(replacement, :replacement)

  extends = Sass::Util::SubsetMap.new
  begin
    replacement.populate_extends(extends, original, nil, [], true)
    selector.do_extend(extends, [], true).to_sass_script
  rescue Sass::SyntaxError =&gt; e
    raise ArgumentError.new(e.to_s)
  end
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="selector_unify-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>, <tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Null.html" title="Sass::Script::Value::Null (class)">Sass::Script::Value::Null</a></span></tt>) <strong>selector_unify</strong>($selector1, $selector2) </h3><div class="docstring"> <div class="discussion"> <p>Unifies two selectors into a single selector that matches only elements matched by both input selectors. Returns <code>null</code> if there is no such selector.</p> <p>Like the selector unification done for <code>@extend</code>, this doesn't guarantee that the output selector will match <em>all</em> elements matched by both input selectors. For example, if <code>.a .b</code> is unified with <code>.x .y</code>, <code>.a .x .b.y, .x .a .b.y</code> will be returned, but <code>.a.x .b.y</code> will not. This avoids exponential output size while matching all elements that are likely to exist in practice.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>selector-unify(".a", ".b") =&gt; .a.b
selector-unify(".a .b", ".x .y") =&gt; .a .x .b.y, .x .a .b.y
selector-unify(".a.b", ".b.c") =&gt; .a.b.c
selector-unify("#a", "#b") =&gt; null</code></pre> </div> <div class="docstring"> <div class="discussion"> <p>Returns A list of lists of strings representing the result of the unification, or null if no unification exists. This is in the same format as a selector returned by <code>&amp;</code>.</p> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$selector1</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>, <tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> — <div class="inline"><p>The first selector to be unified. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p> </div> </li> <li> <span class="name">$selector2</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>, <tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> — <div class="inline"><p>The second selector to be unified. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p> </div> </li> </ul> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>, <tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Null.html" title="Sass::Script::Value::Null (class)">Sass::Script::Value::Null</a></span></tt>)</span> — <div class="inline"><p>A list of lists of strings representing the result of the unification, or null if no unification exists. This is in the same format as a selector returned by <code>&amp;</code>.</p> </div> </li> </ul> </div> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2787
2788
2789
2790
2791
2792</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2787</span>

def selector_unify(selector1, selector2)
  selector1 = parse_selector(selector1, :selector1)
  selector2 = parse_selector(selector2, :selector2)
  return null unless (unified = selector1.unify(selector2))
  unified.to_sass_script
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="set_nth-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>) <strong>set</strong> </h3><div class="docstring"> <div class="discussion"> <p>Return a new list, based on the list provided, but with the nth element changed to the value given.</p> <p>Note that unlike some languages, the first item in a Sass list is number 1, the second number 2, and so forth.</p> <p>Negative index values address elements in reverse order, starting with the last element in the list.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>set-nth($list: 10px 20px 30px, $n: 2, $value: -20px) =&gt; 10px -20px 30px</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$list</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> — <div class="inline"><p>The list that will be copied, having the element at index <code>$n</code> changed.</p> </div> </li> <li> <span class="name">$n</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The index of the item to set. Negative indices count from the end of the list.</p> </div> </li> <li> <span class="name">$value</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> — <div class="inline"><p>The new value at index <code>$n</code>.</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$n</code> isn't an integer between 1 and the length of <code>$list</code></p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1940
1941
1942
1943
1944
1945
1946
1947</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1940</span>

def set_nth(list, n, value)
  assert_type n, :Number, :n
  Sass::Script::Value::List.assert_valid_index(list, n)
  index = n.to_i &gt; 0 ? n.to_i - 1 : n.to_i
  new_list = list.to_a.dup
  new_list[index] = value
  list.with_contents(new_list)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="simple_selectors-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>) <strong>simple_selectors</strong>($selector) </h3><div class="docstring"> <div class="discussion"> <p>Returns the <a href="http://dev.w3.org/csswg/selectors4/#simple" target="_parent">simple selectors</a> that comprise the compound selector <code>$selector</code>.</p> <p>Note that <code>$selector</code> <strong>must be</strong> a <a href="http://dev.w3.org/csswg/selectors4/#compound" target="_parent">compound selector</a>. That means it cannot contain commas or spaces. It also means that unlike other selector functions, this takes only strings, not lists.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>simple-selectors(".foo.bar") =&gt; ".foo", ".bar"
simple-selectors(".foo.bar.baz") =&gt; ".foo", ".bar", ".baz"</code></pre> </div> <div class="docstring"> <div class="discussion"> <p>Returns A list of simple selectors in the compound selector.</p> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$selector</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> — <div class="inline"><p>The compound selector whose simple selectors will be extracted.</p> </div> </li> </ul> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> — <div class="inline"><p>A list of simple selectors in the compound selector.</p> </div> </li> </ul> </div> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2814
2815
2816
2817</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2814</span>

def simple_selectors(selector)
  selector = parse_compound_selector(selector, :selector)
  list(selector.members.map {|simple| unquoted_string(simple.to_s)}, :comma)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="str_index-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>, <tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Null.html" title="Sass::Script::Value::Null (class)">Sass::Script::Value::Null</a></span></tt>) <strong>str_index</strong>($string, $substring) </h3><div class="docstring"> <div class="discussion"> <p>Returns the index of the first occurrence of <code>$substring</code> in <code>$string</code>. If there is no such occurrence, returns <code>null</code>.</p> <p>Note that unlike some languages, the first character in a Sass string is number 1, the second number 2, and so forth.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>str-index(abcd, a)  =&gt; 1
str-index(abcd, ab) =&gt; 1
str-index(abcd, X)  =&gt; null
str-index(abcd, c)  =&gt; 3</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$string</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> </li> <li> <span class="name">$substring</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>, <tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Null.html" title="Sass::Script::Value::Null (class)">Sass::Script::Value::Null</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if any parameter is the wrong type</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1554
1555
1556
1557
1558
1559</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1554</span>

def str_index(string, substring)
  assert_type string, :String, :string
  assert_type substring, :String, :substring
  index = string.value.index(substring.value)
  index ? number(index + 1) : null
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="str_insert-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>) <strong>str_insert</strong>($string, $insert, $index) </h3><div class="docstring"> <div class="discussion"> <p>Inserts <code>$insert</code> into <code>$string</code> at <code>$index</code>.</p> <p>Note that unlike some languages, the first character in a Sass string is number 1, the second number 2, and so forth.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>str-insert("abcd", "X", 1) =&gt; "Xabcd"
str-insert("abcd", "X", 4) =&gt; "abcXd"
str-insert("abcd", "X", 5) =&gt; "abcdX"</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$string</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> </li> <li> <span class="name">$insert</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> </li> <li> <span class="name">$index</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The position at which <code>$insert</code> will be inserted. Negative indices count from the end of <code>$string</code>. An index that's outside the bounds of the string will insert <code>$insert</code> at the front or back of the string</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> — <div class="inline"><p>The result string. This will be quoted if and only if <code>$string</code> was quoted</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if any parameter is the wrong type</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1522
1523
1524
1525
1526
1527
1528
1529
1530
1531
1532
1533
1534</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1522</span>

def str_insert(original, insert, index)
  assert_type original, :String, :string
  assert_type insert, :String, :insert
  assert_integer index, :index
  assert_unit index, nil, :index
  insertion_point = if index.to_i &gt; 0
                      [index.to_i - 1, original.value.size].min
                    else
                      [index.to_i, -original.value.size - 1].max
                    end
  result = original.value.dup.insert(insertion_point, insert.value)
  Sass::Script::Value::String.new(result, original.type)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="str_length-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>) <strong>str_length</strong>($string) </h3><div class="docstring"> <div class="discussion"> <p>Returns the number of characters in a string.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>str-length("foo") =&gt; 3</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$string</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$string</code> isn't a string</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1496
1497
1498
1499</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1496</span>

def str_length(string)
  assert_type string, :String, :string
  number(string.value.size)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="str_slice-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>) <strong>str_slice</strong>($string, $start-at, $end-at:-1) </h3><div class="docstring"> <div class="discussion"> <p>Extracts a substring from <code>$string</code>. The substring will begin at index <code>$start-at</code> and ends at index <code>$end-at</code>.</p> <p>Note that unlike some languages, the first character in a Sass string is number 1, the second number 2, and so forth.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>str-slice("abcd", 2, 3)   =&gt; "bc"
str-slice("abcd", 2)      =&gt; "bcd"
str-slice("abcd", -3, -2) =&gt; "bc"
str-slice("abcd", 2, -2)  =&gt; "bc"</code></pre> </div> <div class="docstring"> <div class="discussion"> <p>Returns The substring. This will be quoted if and only if <code>$string</code> was quoted</p> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$start-at</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The index of the first character of the substring. If this is negative, it counts from the end of <code>$string</code></p> </div> </li> <li> <span class="name">$end-at</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The index of the last character of the substring. If this is negative, it counts from the end of <code>$string</code>. Defaults to -1</p> </div> </li> </ul> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> — <div class="inline"><p>The substring. This will be quoted if and only if <code>$string</code> was quoted</p> </div> </li> </ul> </div> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if any parameter is the wrong type</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1584
1585
1586
1587
1588
1589
1590
1591
1592
1593
1594
1595
1596
1597
1598
1599
1600</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1584</span>

def str_slice(string, start_at, end_at = nil)
  assert_type string, :String, :string
  assert_unit start_at, nil, "start-at"

  end_at = number(-1) if end_at.nil?
  assert_unit end_at, nil, "end-at"

  return Sass::Script::Value::String.new("", string.type) if end_at.value == 0
  s = start_at.value &gt; 0 ? start_at.value - 1 : start_at.value
  e = end_at.value &gt; 0 ? end_at.value - 1 : end_at.value
  s = string.value.length + s if s &lt; 0
  s = 0 if s &lt; 0
  e = string.value.length + e if e &lt; 0
  return Sass::Script::Value::String.new("", string.type) if e &lt; 0
  extracted = string.value.slice(s..e)
  Sass::Script::Value::String.new(extracted || "", string.type)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="to_lower_case-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>) <strong>to_lower_case</strong>($string) </h3><div class="docstring"> <div class="discussion"> <p>Convert a string to lower case,</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>to-lower-case(ABCD) =&gt; abcd</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$string</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$string</code> isn't a string</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1628
1629
1630
1631</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1628</span>

def to_lower_case(string)
  assert_type string, :String, :string
  Sass::Script::Value::String.new(Sass::Util.downcase(string.value), string.type)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="to_upper_case-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>) <strong>to_upper_case</strong>($string) </h3><div class="docstring"> <div class="discussion"> <p>Converts a string to upper case.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>to-upper-case(abcd) =&gt; ABCD</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$string</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$string</code> isn't a string</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1613
1614
1615
1616</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1613</span>

def to_upper_case(string)
  assert_type string, :String, :string
  Sass::Script::Value::String.new(Sass::Util.upcase(string.value), string.type)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="transparentize-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>) <strong>transparentize</strong>($color, $amount) <span class="aliases">Also known as: <span class="names"><span id="fade_out-instance_method">fade_out</span></span> </span> </h3><div class="docstring"> <div class="discussion"> <p>Makes a color more transparent. Takes a color and a number between 0 and 1, and returns a color with the opacity decreased by that amount.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>transparentize(rgba(0, 0, 0, 0.5), 0.1) =&gt; rgba(0, 0, 0, 0.4)
transparentize(rgba(0, 0, 0, 0.8), 0.2) =&gt; rgba(0, 0, 0, 0.6)</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$color</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> <li> <span class="name">$amount</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> — <div class="inline"><p>The amount to decrease the opacity by, between 0 and 1</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Color.html" title="Sass::Script::Value::Color (class)">Sass::Script::Value::Color</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$amount</code> is out of bounds, or either parameter is the wrong type</p> </div> </li> </ul> <p class="tag_title">See Also:</p> <ul class="see"> <li><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#opacify-instance_method" title="Sass::Script::Functions#opacify (method)">#opacify</a></span></li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

987
988
989</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 987</span>

def transparentize(color, amount)
  _adjust(color, amount, :alpha, 0..1, :-)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="type_of-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>) <strong>type_of</strong>($value) </h3><div class="docstring"> <div class="discussion"> <p>Returns the type of a value.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>type-of(100px)  =&gt; number
type-of(asdf)   =&gt; string
type-of("asdf") =&gt; string
type-of(true)   =&gt; bool
type-of(#fff)   =&gt; color
type-of(blue)   =&gt; color
type-of(null)   =&gt; null
type-of(a b c)  =&gt; list
type-of((a: 1, b: 2)) =&gt; map
type-of(get-function("foo")) =&gt; function</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$value</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span></tt>)</span> — <div class="inline"><p>The value to inspect</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> — <div class="inline"><p>The unquoted string name of the value's type</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1652
1653
1654
1655</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1652</span>

def type_of(value)
  value.check_deprecated_interp if value.is_a?(Sass::Script::Value::String)
  identifier(value.class.name.gsub(/Sass::Script::Value::/, '').downcase)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="unique_id-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>) <strong>unique_id</strong> </h3><div class="docstring"> <div class="discussion"> <p>Returns a unique CSS identifier. The identifier is returned as an unquoted string. The identifier returned is only guaranteed to be unique within the scope of a single Sass run.</p> </div> </div> <div class="tags"> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2346
2347
2348
2349
2350
2351
2352
2353</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2346</span>

def unique_id
  generator = Sass::Script::Functions.random_number_generator
  Thread.current[:sass_last_unique_id] ||= generator.rand(36**8)
  # avoid the temptation of trying to guess the next unique value.
  value = (Thread.current[:sass_last_unique_id] += (generator.rand(10) + 1))
  # the u makes this a legal identifier if it would otherwise start with a number.
  identifier("u" + value.to_s(36).rjust(8, '0'))
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="unit-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>) <strong>unit</strong>($number) </h3><div class="docstring"> <div class="discussion"> <p>Returns the unit(s) associated with a number. Complex units are sorted in alphabetical order by numerator and denominator.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>unit(100) =&gt; ""
unit(100px) =&gt; "px"
unit(3em) =&gt; "em"
unit(10px * 5em) =&gt; "em*px"
unit(10px * 5em / 30cm / 1rem) =&gt; "em*px/cm*rem"</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$number</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> — <div class="inline"><p>The unit(s) of the number, as a quoted string</p> </div> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$number</code> isn't a number</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1758
1759
1760
1761</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1758</span>

def unit(number)
  assert_type number, :Number, :number
  quoted_string(number.unit_str)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="unitless-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>) <strong>unitless</strong>($number) </h3><div class="docstring"> <div class="discussion"> <p>Returns whether a number has units.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>unitless(100) =&gt; true
unitless(100px) =&gt; false</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$number</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Number.html" title="Sass::Script::Value::Number (class)">Sass::Script::Value::Number</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$number</code> isn't a number</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1773
1774
1775
1776</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1773</span>

def unitless(number)
  assert_type number, :Number, :number
  bool(number.unitless?)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="unquote-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>) <strong>unquote</strong>($string) </h3><div class="docstring"> <div class="discussion"> <p>Removes quotes from a string. If the string is already unquoted, this will return it unmodified.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>unquote("foo") =&gt; foo
unquote(foo) =&gt; foo</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$string</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> </li> </ul> <p class="tag_title">Raises:</p> <ul class="raise"> <li> <span class="type">(<tt>ArgumentError</tt>)</span> — <div class="inline"><p>if <code>$string</code> isn't a string</p> </div> </li> </ul> <p class="tag_title">See Also:</p> <ul class="see"> <li><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#quote-instance_method" title="Sass::Script::Functions#quote (method)">#quote</a></span></li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

1442
1443
1444
1445
1446
1447
1448
1449
1450
1451
1452
1453
1454
1455
1456
1457
1458
1459
1460
1461
1462
1463
1464</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 1442</span>

def unquote(string)
  unless string.is_a?(Sass::Script::Value::String)
    # Don't warn multiple times for the same source line.
    # rubocop:disable GlobalVars
    $_sass_warned_for_unquote ||= Set.new
    frame = environment.stack.frames.last
    key = [frame.filename, frame.line] if frame
    return string if frame &amp;&amp; $_sass_warned_for_unquote.include?(key)
    $_sass_warned_for_unquote &lt;&lt; key if frame
    # rubocop:enable GlobalVars

    Sass::Util.sass_warn(&lt;&lt;MESSAGE.strip)
DEPRECATION WARNING: Passing #{string.to_sass}, a non-string value, to unquote()
will be an error in future versions of Sass.
#{environment.stack.to_s.gsub(/^/, ' ' * 8)}
MESSAGE
    return string
  end

  string.check_deprecated_interp
  return string if string.type == :identifier
  identifier(string.value)
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="variable_exists-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>) <strong>variable_exists</strong>($name) </h3><div class="docstring"> <div class="discussion"> <p>Check whether a variable with the given name exists in the current scope or in the global scope.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>$a-false-value: false;
variable-exists(a-false-value) =&gt; true
variable-exists(a-null-value) =&gt; true

variable-exists(nonexistent) =&gt; false</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$name</span> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/String.html" title="Sass::Script::Value::String (class)">Sass::Script::Value::String</a></span></tt>)</span> — <div class="inline"><p>The name of the variable to check. The name should not include the <code>$</code>.</p> </div> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Bool.html" title="Sass::Script::Value::Bool (class)">Sass::Script::Value::Bool</a></span></tt>)</span> — <div class="inline"><p>Whether the variable is defined in the current scope.</p> </div> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2443
2444
2445
2446</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2443</span>

def variable_exists(name)
  assert_type name, :String, :name
  bool(environment.caller.var(name.value))
end</pre> </td> </tr> </tbody></table> </div> <div class="method_details "> <h3 class="signature " id="zip-instance_method"> - (<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>) <strong>zip</strong>($lists...) </h3><div class="docstring"> <div class="discussion"> <p>Combines several lists into a single multidimensional list. The nth value of the resulting list is a space separated list of the source lists' nth values.</p> <p>The length of the resulting list is the length of the shortest list.</p> </div> </div> <div class="tags"> <div class="examples"> <p class="tag_title">Examples:</p> <pre class="example code"><code>zip(1px 1px 3px, solid dashed solid, red green blue)
=&gt; 1px solid red, 1px dashed green, 3px solid blue</code></pre> </div> <div class="docstring"> <div class="discussion"> </div> </div> <div class="tags"> <p class="tag_title">Parameters:</p> <ul class="param"> <li> <span class="name">$lists</span> <span class="type">(<tt>[<span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/Base.html" title="Sass::Script::Value::Base (class)">Sass::Script::Value::Base</a></span>]</tt>)</span> </li> </ul> </div> <p class="tag_title">Returns:</p> <ul class="return"> <li> <span class="type">(<tt><span class="object_link"><a href="http://sass-lang.com/documentation/Sass/Script/Value/List.html" title="Sass::Script::Value::List (class)">Sass::Script::Value::List</a></span></tt>)</span> </li> </ul> </div><span class="showSource">[<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#" class="toggleSource">View source</a>]</span><table class="source_code"> <tbody><tr> <td> <pre class="lines">

2117
2118
2119
2120
2121
2122
2123
2124
2125
2126
2127
2128
2129
2130</pre> </td> <td> <pre class="code"><span class="info file"># File '/home/nweiz/code/sass-site/.sass/lib/sass/script/functions.rb', line 2117</span>

def zip(*lists)
  length = nil
  values = []
  lists.each do |list|
    array = list.to_a
    values &lt;&lt; array.dup
    length = length.nil? ? array.length : [length, array.length].min
  end
  values.each do |value|
    value.slice!(length)
  end
  new_list_value = values.first.zip(*values[1..-1])
  list(new_list_value.map {|list| list(list, :space)}, :comma)
end</pre> </td> </tr> </tbody></table> </div> </div> </div> <div id="footer"> Generated on Thu Jul 13 16:29:37 2017 by <a href="http://yardoc.org/" title="Yay! A Ruby Documentation Tool" target="_parent">yard</a> 0.8.7.6 (ruby-2.2.7). </div>  </body></html>